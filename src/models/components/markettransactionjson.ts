/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of transaction.
 */
export enum MarketTransactionJsonType1 {
    Purchase = "PURCHASE",
    Sell = "SELL",
}

/**
 * Result of a transaction with a market.
 */
export type MarketTransactionJson = {
    /**
     * The symbol of the waypoint.
     */
    waypointSymbol: string;
    /**
     * The symbol of the ship that made the transaction.
     */
    shipSymbol: string;
    /**
     * The symbol of the trade good.
     */
    tradeSymbol: string;
    /**
     * The type of transaction.
     */
    type: MarketTransactionJsonType1;
    /**
     * The number of units of the transaction.
     */
    units: number;
    /**
     * The price per unit of the transaction.
     */
    pricePerUnit: number;
    /**
     * The total price of the transaction.
     */
    totalPrice: number;
    /**
     * The timestamp of the transaction.
     */
    timestamp: Date;
};

/** @internal */
export const MarketTransactionJsonType1$ = z.nativeEnum(MarketTransactionJsonType1);

/** @internal */
export namespace MarketTransactionJson$ {
    export type Inbound = {
        waypointSymbol: string;
        shipSymbol: string;
        tradeSymbol: string;
        type: MarketTransactionJsonType1;
        units: number;
        pricePerUnit: number;
        totalPrice: number;
        timestamp: string;
    };

    export const inboundSchema: z.ZodType<MarketTransactionJson, z.ZodTypeDef, Inbound> = z
        .object({
            waypointSymbol: z.string(),
            shipSymbol: z.string(),
            tradeSymbol: z.string(),
            type: MarketTransactionJsonType1$,
            units: z.number().int(),
            pricePerUnit: z.number().int(),
            totalPrice: z.number().int(),
            timestamp: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
        })
        .transform((v) => {
            return {
                waypointSymbol: v.waypointSymbol,
                shipSymbol: v.shipSymbol,
                tradeSymbol: v.tradeSymbol,
                type: v.type,
                units: v.units,
                pricePerUnit: v.pricePerUnit,
                totalPrice: v.totalPrice,
                timestamp: v.timestamp,
            };
        });

    export type Outbound = {
        waypointSymbol: string;
        shipSymbol: string;
        tradeSymbol: string;
        type: MarketTransactionJsonType1;
        units: number;
        pricePerUnit: number;
        totalPrice: number;
        timestamp: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MarketTransactionJson> = z
        .object({
            waypointSymbol: z.string(),
            shipSymbol: z.string(),
            tradeSymbol: z.string(),
            type: MarketTransactionJsonType1$,
            units: z.number().int(),
            pricePerUnit: z.number().int(),
            totalPrice: z.number().int(),
            timestamp: z.date().transform((v) => v.toISOString()),
        })
        .transform((v) => {
            return {
                waypointSymbol: v.waypointSymbol,
                shipSymbol: v.shipSymbol,
                tradeSymbol: v.tradeSymbol,
                type: v.type,
                units: v.units,
                pricePerUnit: v.pricePerUnit,
                totalPrice: v.totalPrice,
                timestamp: v.timestamp,
            };
        });
}
