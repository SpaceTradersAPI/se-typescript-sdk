/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Result of a transaction for a ship modification, such as installing a mount or a module.
 */
export type ShipModificationTransactionJson = {
    /**
     * The symbol of the waypoint where the transaction took place.
     */
    waypointSymbol: string;
    /**
     * The symbol of the ship that made the transaction.
     */
    shipSymbol: string;
    /**
     * The symbol of the trade good.
     */
    tradeSymbol: string;
    /**
     * The total price of the transaction.
     */
    totalPrice: number;
    /**
     * The timestamp of the transaction.
     */
    timestamp: Date;
};

/** @internal */
export namespace ShipModificationTransactionJson$ {
    export type Inbound = {
        waypointSymbol: string;
        shipSymbol: string;
        tradeSymbol: string;
        totalPrice: number;
        timestamp: string;
    };

    export const inboundSchema: z.ZodType<ShipModificationTransactionJson, z.ZodTypeDef, Inbound> =
        z
            .object({
                waypointSymbol: z.string(),
                shipSymbol: z.string(),
                tradeSymbol: z.string(),
                totalPrice: z.number().int(),
                timestamp: z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v)),
            })
            .transform((v) => {
                return {
                    waypointSymbol: v.waypointSymbol,
                    shipSymbol: v.shipSymbol,
                    tradeSymbol: v.tradeSymbol,
                    totalPrice: v.totalPrice,
                    timestamp: v.timestamp,
                };
            });

    export type Outbound = {
        waypointSymbol: string;
        shipSymbol: string;
        tradeSymbol: string;
        totalPrice: number;
        timestamp: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ShipModificationTransactionJson
    > = z
        .object({
            waypointSymbol: z.string(),
            shipSymbol: z.string(),
            tradeSymbol: z.string(),
            totalPrice: z.number().int(),
            timestamp: z.date().transform((v) => v.toISOString()),
        })
        .transform((v) => {
            return {
                waypointSymbol: v.waypointSymbol,
                shipSymbol: v.shipSymbol,
                tradeSymbol: v.tradeSymbol,
                totalPrice: v.totalPrice,
                timestamp: v.timestamp,
            };
        });
}
