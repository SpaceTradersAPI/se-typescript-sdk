/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.
 */
export type ShipFuelJsonConsumed = {
    /**
     * The amount of fuel consumed by the most recent transit or action.
     */
    amount: number;
    /**
     * The time at which the fuel was consumed.
     */
    timestamp: Date;
};

/**
 * Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
 */
export type ShipFuelJson = {
    /**
     * The current amount of fuel in the ship's tanks.
     */
    current: number;
    /**
     * The maximum amount of fuel the ship's tanks can hold.
     */
    capacity: number;
    /**
     * An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.
     */
    consumed?: ShipFuelJsonConsumed | undefined;
};

/** @internal */
export namespace ShipFuelJsonConsumed$ {
    export type Inbound = {
        amount: number;
        timestamp: string;
    };

    export const inboundSchema: z.ZodType<ShipFuelJsonConsumed, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.number().int(),
            timestamp: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                timestamp: v.timestamp,
            };
        });

    export type Outbound = {
        amount: number;
        timestamp: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ShipFuelJsonConsumed> = z
        .object({
            amount: z.number().int(),
            timestamp: z.date().transform((v) => v.toISOString()),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                timestamp: v.timestamp,
            };
        });
}

/** @internal */
export namespace ShipFuelJson$ {
    export type Inbound = {
        current: number;
        capacity: number;
        consumed?: ShipFuelJsonConsumed$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ShipFuelJson, z.ZodTypeDef, Inbound> = z
        .object({
            current: z.number().int(),
            capacity: z.number().int(),
            consumed: z.lazy(() => ShipFuelJsonConsumed$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                current: v.current,
                capacity: v.capacity,
                ...(v.consumed === undefined ? null : { consumed: v.consumed }),
            };
        });

    export type Outbound = {
        current: number;
        capacity: number;
        consumed?: ShipFuelJsonConsumed$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ShipFuelJson> = z
        .object({
            current: z.number().int(),
            capacity: z.number().int(),
            consumed: z.lazy(() => ShipFuelJsonConsumed$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                current: v.current,
                capacity: v.capacity,
                ...(v.consumed === undefined ? null : { consumed: v.consumed }),
            };
        });
}
