/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SystemTypeJson, SystemTypeJson$ } from "./factionjson";
import * as z from "zod";

/**
 * Details of a system was that scanned.
 */
export type ScannedSystemJson = {
    /**
     * Symbol of the system.
     */
    symbol: string;
    /**
     * Symbol of the system's sector.
     */
    sectorSymbol: string;
    /**
     * The type of system.
     */
    type: SystemTypeJson;
    /**
     * Position in the universe in the x axis.
     */
    x: number;
    /**
     * Position in the universe in the y axis.
     */
    y: number;
    /**
     * The system's distance from the scanning ship.
     */
    distance: number;
};

/** @internal */
export namespace ScannedSystemJson$ {
    export type Inbound = {
        symbol: string;
        sectorSymbol: string;
        type: SystemTypeJson;
        x: number;
        y: number;
        distance: number;
    };

    export const inboundSchema: z.ZodType<ScannedSystemJson, z.ZodTypeDef, Inbound> = z
        .object({
            symbol: z.string(),
            sectorSymbol: z.string(),
            type: SystemTypeJson$,
            x: z.number().int(),
            y: z.number().int(),
            distance: z.number().int(),
        })
        .transform((v) => {
            return {
                symbol: v.symbol,
                sectorSymbol: v.sectorSymbol,
                type: v.type,
                x: v.x,
                y: v.y,
                distance: v.distance,
            };
        });

    export type Outbound = {
        symbol: string;
        sectorSymbol: string;
        type: SystemTypeJson;
        x: number;
        y: number;
        distance: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ScannedSystemJson> = z
        .object({
            symbol: z.string(),
            sectorSymbol: z.string(),
            type: SystemTypeJson$,
            x: z.number().int(),
            y: z.number().int(),
            distance: z.number().int(),
        })
        .transform((v) => {
            return {
                symbol: v.symbol,
                sectorSymbol: v.sectorSymbol,
                type: v.type,
                x: v.x,
                y: v.y,
                distance: v.distance,
            };
        });
}
