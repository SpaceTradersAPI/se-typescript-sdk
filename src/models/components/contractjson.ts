/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Type of contract.
 */
export enum Type {
    Procurement = "PROCUREMENT",
    Transport = "TRANSPORT",
    Shuttle = "SHUTTLE",
}

/**
 * Payments for the contract.
 */
export type ContractPaymentJson = {
    /**
     * The amount of credits received up front for accepting the contract.
     */
    onAccepted: number;
    /**
     * The amount of credits received when the contract is fulfilled.
     */
    onFulfilled: number;
};

/**
 * The details of a delivery contract. Includes the type of good, units needed, and the destination.
 */
export type ContractDeliverGoodJson = {
    /**
     * The symbol of the trade good to deliver.
     */
    tradeSymbol: string;
    /**
     * The destination where goods need to be delivered.
     */
    destinationSymbol: string;
    /**
     * The number of units that need to be delivered on this contract.
     */
    unitsRequired: number;
    /**
     * The number of units fulfilled on this contract.
     */
    unitsFulfilled: number;
};

/**
 * The terms to fulfill the contract.
 */
export type ContractTermsJson = {
    /**
     * The deadline for the contract.
     */
    deadline: Date;
    /**
     * Payments for the contract.
     */
    payment: ContractPaymentJson;
    /**
     * The cargo that needs to be delivered to fulfill the contract.
     */
    deliver?: Array<ContractDeliverGoodJson> | undefined;
};

/**
 * Contract details.
 */
export type ContractJson = {
    /**
     * ID of the contract.
     */
    id: string;
    /**
     * The symbol of the faction that this contract is for.
     */
    factionSymbol: string;
    /**
     * Type of contract.
     */
    type: Type;
    /**
     * The terms to fulfill the contract.
     */
    terms: ContractTermsJson;
    /**
     * Whether the contract has been accepted by the agent
     */
    accepted?: boolean | undefined;
    /**
     * Whether the contract has been fulfilled
     */
    fulfilled?: boolean | undefined;
    /**
     * Deprecated in favor of deadlineToAccept
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    expiration: Date;
    /**
     * The time at which the contract is no longer available to be accepted
     */
    deadlineToAccept?: Date | undefined;
};

/** @internal */
export const Type$ = z.nativeEnum(Type);

/** @internal */
export namespace ContractPaymentJson$ {
    export type Inbound = {
        onAccepted: number;
        onFulfilled: number;
    };

    export const inboundSchema: z.ZodType<ContractPaymentJson, z.ZodTypeDef, Inbound> = z
        .object({
            onAccepted: z.number().int(),
            onFulfilled: z.number().int(),
        })
        .transform((v) => {
            return {
                onAccepted: v.onAccepted,
                onFulfilled: v.onFulfilled,
            };
        });

    export type Outbound = {
        onAccepted: number;
        onFulfilled: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContractPaymentJson> = z
        .object({
            onAccepted: z.number().int(),
            onFulfilled: z.number().int(),
        })
        .transform((v) => {
            return {
                onAccepted: v.onAccepted,
                onFulfilled: v.onFulfilled,
            };
        });
}

/** @internal */
export namespace ContractDeliverGoodJson$ {
    export type Inbound = {
        tradeSymbol: string;
        destinationSymbol: string;
        unitsRequired: number;
        unitsFulfilled: number;
    };

    export const inboundSchema: z.ZodType<ContractDeliverGoodJson, z.ZodTypeDef, Inbound> = z
        .object({
            tradeSymbol: z.string(),
            destinationSymbol: z.string(),
            unitsRequired: z.number().int(),
            unitsFulfilled: z.number().int(),
        })
        .transform((v) => {
            return {
                tradeSymbol: v.tradeSymbol,
                destinationSymbol: v.destinationSymbol,
                unitsRequired: v.unitsRequired,
                unitsFulfilled: v.unitsFulfilled,
            };
        });

    export type Outbound = {
        tradeSymbol: string;
        destinationSymbol: string;
        unitsRequired: number;
        unitsFulfilled: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContractDeliverGoodJson> = z
        .object({
            tradeSymbol: z.string(),
            destinationSymbol: z.string(),
            unitsRequired: z.number().int(),
            unitsFulfilled: z.number().int(),
        })
        .transform((v) => {
            return {
                tradeSymbol: v.tradeSymbol,
                destinationSymbol: v.destinationSymbol,
                unitsRequired: v.unitsRequired,
                unitsFulfilled: v.unitsFulfilled,
            };
        });
}

/** @internal */
export namespace ContractTermsJson$ {
    export type Inbound = {
        deadline: string;
        payment: ContractPaymentJson$.Inbound;
        deliver?: Array<ContractDeliverGoodJson$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<ContractTermsJson, z.ZodTypeDef, Inbound> = z
        .object({
            deadline: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            payment: z.lazy(() => ContractPaymentJson$.inboundSchema),
            deliver: z.array(z.lazy(() => ContractDeliverGoodJson$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                deadline: v.deadline,
                payment: v.payment,
                ...(v.deliver === undefined ? null : { deliver: v.deliver }),
            };
        });

    export type Outbound = {
        deadline: string;
        payment: ContractPaymentJson$.Outbound;
        deliver?: Array<ContractDeliverGoodJson$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContractTermsJson> = z
        .object({
            deadline: z.date().transform((v) => v.toISOString()),
            payment: z.lazy(() => ContractPaymentJson$.outboundSchema),
            deliver: z.array(z.lazy(() => ContractDeliverGoodJson$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                deadline: v.deadline,
                payment: v.payment,
                ...(v.deliver === undefined ? null : { deliver: v.deliver }),
            };
        });
}

/** @internal */
export namespace ContractJson$ {
    export type Inbound = {
        id: string;
        factionSymbol: string;
        type: Type;
        terms: ContractTermsJson$.Inbound;
        accepted?: boolean | undefined;
        fulfilled?: boolean | undefined;
        expiration: string;
        deadlineToAccept?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ContractJson, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            factionSymbol: z.string(),
            type: Type$,
            terms: z.lazy(() => ContractTermsJson$.inboundSchema),
            accepted: z.boolean().default(false),
            fulfilled: z.boolean().default(false),
            expiration: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            deadlineToAccept: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                factionSymbol: v.factionSymbol,
                type: v.type,
                terms: v.terms,
                accepted: v.accepted,
                fulfilled: v.fulfilled,
                expiration: v.expiration,
                ...(v.deadlineToAccept === undefined
                    ? null
                    : { deadlineToAccept: v.deadlineToAccept }),
            };
        });

    export type Outbound = {
        id: string;
        factionSymbol: string;
        type: Type;
        terms: ContractTermsJson$.Outbound;
        accepted: boolean;
        fulfilled: boolean;
        expiration: string;
        deadlineToAccept?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContractJson> = z
        .object({
            id: z.string(),
            factionSymbol: z.string(),
            type: Type$,
            terms: z.lazy(() => ContractTermsJson$.outboundSchema),
            accepted: z.boolean().default(false),
            fulfilled: z.boolean().default(false),
            expiration: z.date().transform((v) => v.toISOString()),
            deadlineToAccept: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                factionSymbol: v.factionSymbol,
                type: v.type,
                terms: v.terms,
                accepted: v.accepted,
                fulfilled: v.fulfilled,
                expiration: v.expiration,
                ...(v.deadlineToAccept === undefined
                    ? null
                    : { deadlineToAccept: v.deadlineToAccept }),
            };
        });
}
