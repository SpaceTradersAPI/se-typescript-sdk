/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Agent details.
 */
export type AgentJson = {
    /**
     * Account ID that is tied to this agent. Only included on your own agent.
     */
    accountId?: string | undefined;
    /**
     * Symbol of the agent.
     */
    symbol: string;
    /**
     * The headquarters of the agent.
     */
    headquarters: string;
    /**
     * The number of credits the agent has available. Credits can be negative if funds have been overdrawn.
     */
    credits: number;
    /**
     * The faction the agent started with.
     */
    startingFaction: string;
    /**
     * How many ships are owned by the agent.
     */
    shipCount: number;
};

/** @internal */
export namespace AgentJson$ {
    export type Inbound = {
        accountId?: string | undefined;
        symbol: string;
        headquarters: string;
        credits: number;
        startingFaction: string;
        shipCount: number;
    };

    export const inboundSchema: z.ZodType<AgentJson, z.ZodTypeDef, Inbound> = z
        .object({
            accountId: z.string().optional(),
            symbol: z.string(),
            headquarters: z.string(),
            credits: z.number().int(),
            startingFaction: z.string(),
            shipCount: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                symbol: v.symbol,
                headquarters: v.headquarters,
                credits: v.credits,
                startingFaction: v.startingFaction,
                shipCount: v.shipCount,
            };
        });

    export type Outbound = {
        accountId?: string | undefined;
        symbol: string;
        headquarters: string;
        credits: number;
        startingFaction: string;
        shipCount: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AgentJson> = z
        .object({
            accountId: z.string().optional(),
            symbol: z.string(),
            headquarters: z.string(),
            credits: z.number().int(),
            startingFaction: z.string(),
            shipCount: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                symbol: v.symbol,
                headquarters: v.headquarters,
                credits: v.credits,
                startingFaction: v.startingFaction,
                shipCount: v.shipCount,
            };
        });
}
