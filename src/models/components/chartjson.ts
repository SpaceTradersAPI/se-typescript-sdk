/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The chart of a system or waypoint, which makes the location visible to other agents.
 */
export type ChartJson = {
    /**
     * The symbol of the waypoint.
     */
    waypointSymbol?: string | undefined;
    /**
     * The agent that submitted the chart for this waypoint.
     */
    submittedBy?: string | undefined;
    /**
     * The time the chart for this waypoint was submitted.
     */
    submittedOn?: Date | undefined;
};

/** @internal */
export namespace ChartJson$ {
    export type Inbound = {
        waypointSymbol?: string | undefined;
        submittedBy?: string | undefined;
        submittedOn?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ChartJson, z.ZodTypeDef, Inbound> = z
        .object({
            waypointSymbol: z.string().optional(),
            submittedBy: z.string().optional(),
            submittedOn: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.waypointSymbol === undefined ? null : { waypointSymbol: v.waypointSymbol }),
                ...(v.submittedBy === undefined ? null : { submittedBy: v.submittedBy }),
                ...(v.submittedOn === undefined ? null : { submittedOn: v.submittedOn }),
            };
        });

    export type Outbound = {
        waypointSymbol?: string | undefined;
        submittedBy?: string | undefined;
        submittedOn?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChartJson> = z
        .object({
            waypointSymbol: z.string().optional(),
            submittedBy: z.string().optional(),
            submittedOn: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.waypointSymbol === undefined ? null : { waypointSymbol: v.waypointSymbol }),
                ...(v.submittedBy === undefined ? null : { submittedBy: v.submittedBy }),
                ...(v.submittedOn === undefined ? null : { submittedOn: v.submittedOn }),
            };
        });
}
