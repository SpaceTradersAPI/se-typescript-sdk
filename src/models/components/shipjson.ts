/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    ShipNavJsonShipNavJson,
    ShipNavJsonShipNavJson$,
    ShipRegistrationJson,
    ShipRegistrationJson$,
    ShipRequirementsJson,
    ShipRequirementsJson$,
} from "./factionjson";
import * as z from "zod";

/**
 * The frame of the ship.
 */
export type Frame = {
    /**
     * The symbol of the frame.
     */
    symbol: string;
};

/**
 * The reactor of the ship.
 */
export type Reactor = {
    /**
     * The symbol of the reactor.
     */
    symbol: string;
};

/**
 * The engine of the ship.
 */
export type Engine = {
    /**
     * The symbol of the engine.
     */
    symbol: string;
};

/**
 * A mount on the ship.
 */
export type Mounts = {
    /**
     * The symbol of the mount.
     */
    symbol: string;
};

/**
 * The ship that was scanned. Details include information about the ship that could be detected by the scanner.
 */
export type ScannedShipJson = {
    /**
     * The globally unique identifier of the ship.
     */
    symbol: string;
    /**
     * The public registration information of the ship
     */
    registration: ShipRegistrationJson;
    /**
     * The navigation information of the ship.
     */
    nav: ShipNavJsonShipNavJson;
    /**
     * The frame of the ship.
     */
    frame?: Frame | undefined;
    /**
     * The reactor of the ship.
     */
    reactor?: Reactor | undefined;
    /**
     * The engine of the ship.
     */
    engine: Engine;
    /**
     * List of mounts installed in the ship.
     */
    mounts?: Array<Mounts> | undefined;
};

/**
 * Symbo of this mount.
 */
export enum ShipMountJsonSymbol1 {
    MountGasSiphonI = "MOUNT_GAS_SIPHON_I",
    MountGasSiphonIi = "MOUNT_GAS_SIPHON_II",
    MountGasSiphonIii = "MOUNT_GAS_SIPHON_III",
    MountSurveyorI = "MOUNT_SURVEYOR_I",
    MountSurveyorIi = "MOUNT_SURVEYOR_II",
    MountSurveyorIii = "MOUNT_SURVEYOR_III",
    MountSensorArrayI = "MOUNT_SENSOR_ARRAY_I",
    MountSensorArrayIi = "MOUNT_SENSOR_ARRAY_II",
    MountSensorArrayIii = "MOUNT_SENSOR_ARRAY_III",
    MountMiningLaserI = "MOUNT_MINING_LASER_I",
    MountMiningLaserIi = "MOUNT_MINING_LASER_II",
    MountMiningLaserIii = "MOUNT_MINING_LASER_III",
    MountLaserCannonI = "MOUNT_LASER_CANNON_I",
    MountMissileLauncherI = "MOUNT_MISSILE_LAUNCHER_I",
    MountTurretI = "MOUNT_TURRET_I",
}

export enum ShipMountJsonDeposits {
    QuartzSand = "QUARTZ_SAND",
    SiliconCrystals = "SILICON_CRYSTALS",
    PreciousStones = "PRECIOUS_STONES",
    IceWater = "ICE_WATER",
    AmmoniaIce = "AMMONIA_ICE",
    IronOre = "IRON_ORE",
    CopperOre = "COPPER_ORE",
    SilverOre = "SILVER_ORE",
    AluminumOre = "ALUMINUM_ORE",
    GoldOre = "GOLD_ORE",
    PlatinumOre = "PLATINUM_ORE",
    Diamonds = "DIAMONDS",
    UraniteOre = "URANITE_ORE",
    MeritiumOre = "MERITIUM_ORE",
}

/**
 * A mount is installed on the exterier of a ship.
 */
export type ShipMountJson = {
    /**
     * Symbo of this mount.
     */
    symbol: ShipMountJsonSymbol1;
    /**
     * Name of this mount.
     */
    name: string;
    /**
     * Description of this mount.
     */
    description?: string | undefined;
    /**
     * Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.
     */
    strength?: number | undefined;
    /**
     * Mounts that have this value denote what goods can be produced from using the mount.
     */
    deposits?: Array<ShipMountJsonDeposits> | undefined;
    /**
     * The requirements for installation on a ship
     */
    requirements: ShipRequirementsJson;
};

/** @internal */
export namespace Frame$ {
    export type Inbound = {
        symbol: string;
    };

    export const inboundSchema: z.ZodType<Frame, z.ZodTypeDef, Inbound> = z
        .object({
            symbol: z.string(),
        })
        .transform((v) => {
            return {
                symbol: v.symbol,
            };
        });

    export type Outbound = {
        symbol: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Frame> = z
        .object({
            symbol: z.string(),
        })
        .transform((v) => {
            return {
                symbol: v.symbol,
            };
        });
}

/** @internal */
export namespace Reactor$ {
    export type Inbound = {
        symbol: string;
    };

    export const inboundSchema: z.ZodType<Reactor, z.ZodTypeDef, Inbound> = z
        .object({
            symbol: z.string(),
        })
        .transform((v) => {
            return {
                symbol: v.symbol,
            };
        });

    export type Outbound = {
        symbol: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Reactor> = z
        .object({
            symbol: z.string(),
        })
        .transform((v) => {
            return {
                symbol: v.symbol,
            };
        });
}

/** @internal */
export namespace Engine$ {
    export type Inbound = {
        symbol: string;
    };

    export const inboundSchema: z.ZodType<Engine, z.ZodTypeDef, Inbound> = z
        .object({
            symbol: z.string(),
        })
        .transform((v) => {
            return {
                symbol: v.symbol,
            };
        });

    export type Outbound = {
        symbol: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Engine> = z
        .object({
            symbol: z.string(),
        })
        .transform((v) => {
            return {
                symbol: v.symbol,
            };
        });
}

/** @internal */
export namespace Mounts$ {
    export type Inbound = {
        symbol: string;
    };

    export const inboundSchema: z.ZodType<Mounts, z.ZodTypeDef, Inbound> = z
        .object({
            symbol: z.string(),
        })
        .transform((v) => {
            return {
                symbol: v.symbol,
            };
        });

    export type Outbound = {
        symbol: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Mounts> = z
        .object({
            symbol: z.string(),
        })
        .transform((v) => {
            return {
                symbol: v.symbol,
            };
        });
}

/** @internal */
export namespace ScannedShipJson$ {
    export type Inbound = {
        symbol: string;
        registration: ShipRegistrationJson$.Inbound;
        nav: ShipNavJsonShipNavJson$.Inbound;
        frame?: Frame$.Inbound | undefined;
        reactor?: Reactor$.Inbound | undefined;
        engine: Engine$.Inbound;
        mounts?: Array<Mounts$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<ScannedShipJson, z.ZodTypeDef, Inbound> = z
        .object({
            symbol: z.string(),
            registration: ShipRegistrationJson$.inboundSchema,
            nav: ShipNavJsonShipNavJson$.inboundSchema,
            frame: z.lazy(() => Frame$.inboundSchema).optional(),
            reactor: z.lazy(() => Reactor$.inboundSchema).optional(),
            engine: z.lazy(() => Engine$.inboundSchema),
            mounts: z.array(z.lazy(() => Mounts$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                symbol: v.symbol,
                registration: v.registration,
                nav: v.nav,
                ...(v.frame === undefined ? null : { frame: v.frame }),
                ...(v.reactor === undefined ? null : { reactor: v.reactor }),
                engine: v.engine,
                ...(v.mounts === undefined ? null : { mounts: v.mounts }),
            };
        });

    export type Outbound = {
        symbol: string;
        registration: ShipRegistrationJson$.Outbound;
        nav: ShipNavJsonShipNavJson$.Outbound;
        frame?: Frame$.Outbound | undefined;
        reactor?: Reactor$.Outbound | undefined;
        engine: Engine$.Outbound;
        mounts?: Array<Mounts$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ScannedShipJson> = z
        .object({
            symbol: z.string(),
            registration: ShipRegistrationJson$.outboundSchema,
            nav: ShipNavJsonShipNavJson$.outboundSchema,
            frame: z.lazy(() => Frame$.outboundSchema).optional(),
            reactor: z.lazy(() => Reactor$.outboundSchema).optional(),
            engine: z.lazy(() => Engine$.outboundSchema),
            mounts: z.array(z.lazy(() => Mounts$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                symbol: v.symbol,
                registration: v.registration,
                nav: v.nav,
                ...(v.frame === undefined ? null : { frame: v.frame }),
                ...(v.reactor === undefined ? null : { reactor: v.reactor }),
                engine: v.engine,
                ...(v.mounts === undefined ? null : { mounts: v.mounts }),
            };
        });
}

/** @internal */
export const ShipMountJsonSymbol1$ = z.nativeEnum(ShipMountJsonSymbol1);

/** @internal */
export const ShipMountJsonDeposits$ = z.nativeEnum(ShipMountJsonDeposits);

/** @internal */
export namespace ShipMountJson$ {
    export type Inbound = {
        symbol: ShipMountJsonSymbol1;
        name: string;
        description?: string | undefined;
        strength?: number | undefined;
        deposits?: Array<ShipMountJsonDeposits> | undefined;
        requirements: ShipRequirementsJson$.Inbound;
    };

    export const inboundSchema: z.ZodType<ShipMountJson, z.ZodTypeDef, Inbound> = z
        .object({
            symbol: ShipMountJsonSymbol1$,
            name: z.string(),
            description: z.string().optional(),
            strength: z.number().int().optional(),
            deposits: z.array(ShipMountJsonDeposits$).optional(),
            requirements: ShipRequirementsJson$.inboundSchema,
        })
        .transform((v) => {
            return {
                symbol: v.symbol,
                name: v.name,
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.strength === undefined ? null : { strength: v.strength }),
                ...(v.deposits === undefined ? null : { deposits: v.deposits }),
                requirements: v.requirements,
            };
        });

    export type Outbound = {
        symbol: ShipMountJsonSymbol1;
        name: string;
        description?: string | undefined;
        strength?: number | undefined;
        deposits?: Array<ShipMountJsonDeposits> | undefined;
        requirements: ShipRequirementsJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ShipMountJson> = z
        .object({
            symbol: ShipMountJsonSymbol1$,
            name: z.string(),
            description: z.string().optional(),
            strength: z.number().int().optional(),
            deposits: z.array(ShipMountJsonDeposits$).optional(),
            requirements: ShipRequirementsJson$.outboundSchema,
        })
        .transform((v) => {
            return {
                symbol: v.symbol,
                name: v.name,
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.strength === undefined ? null : { strength: v.strength }),
                ...(v.deposits === undefined ? null : { deposits: v.deposits }),
                requirements: v.requirements,
            };
        });
}
