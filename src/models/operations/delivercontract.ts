/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type DeliverContractSecurity = {
    agentToken: string;
};

export type DeliverContractRequestBody = {
    /**
     * Symbol of a ship located in the destination to deliver a contract and that has a good to deliver in its cargo.
     */
    shipSymbol: string;
    /**
     * The symbol of the good to deliver.
     */
    tradeSymbol: string;
    /**
     * Amount of units to deliver.
     */
    units: number;
};

export type DeliverContractRequest = {
    /**
     * The ID of the contract.
     */
    contractId: string;
    requestBody?: DeliverContractRequestBody | undefined;
};

export type DeliverContractData = {
    /**
     * Contract details.
     */
    contract: components.ContractJson;
    /**
     * Ship cargo details.
     */
    cargo: components.ShipCargoJson;
};

/**
 * Successfully delivered cargo to contract.
 */
export type DeliverContractResponseBody = {
    data: DeliverContractData;
};

export type DeliverContractResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successfully delivered cargo to contract.
     */
    object?: DeliverContractResponseBody | undefined;
};

/** @internal */
export namespace DeliverContractSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<DeliverContractSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeliverContractSecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export namespace DeliverContractRequestBody$ {
    export type Inbound = {
        shipSymbol: string;
        tradeSymbol: string;
        units: number;
    };

    export const inboundSchema: z.ZodType<DeliverContractRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            shipSymbol: z.string(),
            tradeSymbol: z.string(),
            units: z.number().int(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
                tradeSymbol: v.tradeSymbol,
                units: v.units,
            };
        });

    export type Outbound = {
        shipSymbol: string;
        tradeSymbol: string;
        units: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeliverContractRequestBody> = z
        .object({
            shipSymbol: z.string(),
            tradeSymbol: z.string(),
            units: z.number().int(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
                tradeSymbol: v.tradeSymbol,
                units: v.units,
            };
        });
}

/** @internal */
export namespace DeliverContractRequest$ {
    export type Inbound = {
        contractId: string;
        RequestBody?: DeliverContractRequestBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<DeliverContractRequest, z.ZodTypeDef, Inbound> = z
        .object({
            contractId: z.string(),
            RequestBody: z.lazy(() => DeliverContractRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contractId: v.contractId,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        contractId: string;
        RequestBody?: DeliverContractRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeliverContractRequest> = z
        .object({
            contractId: z.string(),
            requestBody: z.lazy(() => DeliverContractRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contractId: v.contractId,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace DeliverContractData$ {
    export type Inbound = {
        contract: components.ContractJson$.Inbound;
        cargo: components.ShipCargoJson$.Inbound;
    };

    export const inboundSchema: z.ZodType<DeliverContractData, z.ZodTypeDef, Inbound> = z
        .object({
            contract: components.ContractJson$.inboundSchema,
            cargo: components.ShipCargoJson$.inboundSchema,
        })
        .transform((v) => {
            return {
                contract: v.contract,
                cargo: v.cargo,
            };
        });

    export type Outbound = {
        contract: components.ContractJson$.Outbound;
        cargo: components.ShipCargoJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeliverContractData> = z
        .object({
            contract: components.ContractJson$.outboundSchema,
            cargo: components.ShipCargoJson$.outboundSchema,
        })
        .transform((v) => {
            return {
                contract: v.contract,
                cargo: v.cargo,
            };
        });
}

/** @internal */
export namespace DeliverContractResponseBody$ {
    export type Inbound = {
        data: DeliverContractData$.Inbound;
    };

    export const inboundSchema: z.ZodType<DeliverContractResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => DeliverContractData$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: DeliverContractData$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeliverContractResponseBody> = z
        .object({
            data: z.lazy(() => DeliverContractData$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace DeliverContractResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: DeliverContractResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<DeliverContractResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => DeliverContractResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: DeliverContractResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeliverContractResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => DeliverContractResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
