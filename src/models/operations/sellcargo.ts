/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type SellCargoSecurity = {
    agentToken: string;
};

export type SellCargoSellCargoRequest = {
    /**
     * The good's symbol.
     */
    symbol: components.TradeSymbolJson;
    /**
     * Amounts of units to sell of the selected good.
     */
    units: number;
};

export type SellCargoRequest = {
    /**
     * Symbol of a ship.
     */
    shipSymbol: string;
    requestBody?: SellCargoSellCargoRequest | undefined;
};

export type SellCargoData = {
    /**
     * Agent details.
     */
    agent: components.AgentJson;
    /**
     * Ship cargo details.
     */
    cargo: components.ShipCargoJson;
    /**
     * Result of a transaction with a market.
     */
    transaction: components.MarketTransactionJson;
};

/**
 * Cargo was successfully sold.
 */
export type SellCargoSellCargo201Response = {
    data: SellCargoData;
};

export type SellCargoResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Cargo was successfully sold.
     */
    sellCargo201Response?: SellCargoSellCargo201Response | undefined;
};

/** @internal */
export namespace SellCargoSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<SellCargoSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SellCargoSecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export namespace SellCargoSellCargoRequest$ {
    export type Inbound = {
        symbol: components.TradeSymbolJson;
        units: number;
    };

    export const inboundSchema: z.ZodType<SellCargoSellCargoRequest, z.ZodTypeDef, Inbound> = z
        .object({
            symbol: components.TradeSymbolJson$,
            units: z.number().int(),
        })
        .transform((v) => {
            return {
                symbol: v.symbol,
                units: v.units,
            };
        });

    export type Outbound = {
        symbol: components.TradeSymbolJson;
        units: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SellCargoSellCargoRequest> = z
        .object({
            symbol: components.TradeSymbolJson$,
            units: z.number().int(),
        })
        .transform((v) => {
            return {
                symbol: v.symbol,
                units: v.units,
            };
        });
}

/** @internal */
export namespace SellCargoRequest$ {
    export type Inbound = {
        shipSymbol: string;
        RequestBody?: SellCargoSellCargoRequest$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<SellCargoRequest, z.ZodTypeDef, Inbound> = z
        .object({
            shipSymbol: z.string(),
            RequestBody: z.lazy(() => SellCargoSellCargoRequest$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        shipSymbol: string;
        RequestBody?: SellCargoSellCargoRequest$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SellCargoRequest> = z
        .object({
            shipSymbol: z.string(),
            requestBody: z.lazy(() => SellCargoSellCargoRequest$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace SellCargoData$ {
    export type Inbound = {
        agent: components.AgentJson$.Inbound;
        cargo: components.ShipCargoJson$.Inbound;
        transaction: components.MarketTransactionJson$.Inbound;
    };

    export const inboundSchema: z.ZodType<SellCargoData, z.ZodTypeDef, Inbound> = z
        .object({
            agent: components.AgentJson$.inboundSchema,
            cargo: components.ShipCargoJson$.inboundSchema,
            transaction: components.MarketTransactionJson$.inboundSchema,
        })
        .transform((v) => {
            return {
                agent: v.agent,
                cargo: v.cargo,
                transaction: v.transaction,
            };
        });

    export type Outbound = {
        agent: components.AgentJson$.Outbound;
        cargo: components.ShipCargoJson$.Outbound;
        transaction: components.MarketTransactionJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SellCargoData> = z
        .object({
            agent: components.AgentJson$.outboundSchema,
            cargo: components.ShipCargoJson$.outboundSchema,
            transaction: components.MarketTransactionJson$.outboundSchema,
        })
        .transform((v) => {
            return {
                agent: v.agent,
                cargo: v.cargo,
                transaction: v.transaction,
            };
        });
}

/** @internal */
export namespace SellCargoSellCargo201Response$ {
    export type Inbound = {
        data: SellCargoData$.Inbound;
    };

    export const inboundSchema: z.ZodType<SellCargoSellCargo201Response, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => SellCargoData$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: SellCargoData$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SellCargoSellCargo201Response> =
        z
            .object({
                data: z.lazy(() => SellCargoData$.outboundSchema),
            })
            .transform((v) => {
                return {
                    data: v.data,
                };
            });
}

/** @internal */
export namespace SellCargoResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        "Sell Cargo 201 Response"?: SellCargoSellCargo201Response$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<SellCargoResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            "Sell Cargo 201 Response": z
                .lazy(() => SellCargoSellCargo201Response$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v["Sell Cargo 201 Response"] === undefined
                    ? null
                    : { sellCargo201Response: v["Sell Cargo 201 Response"] }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        "Sell Cargo 201 Response"?: SellCargoSellCargo201Response$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SellCargoResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            sellCargo201Response: z
                .lazy(() => SellCargoSellCargo201Response$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.sellCargo201Response === undefined
                    ? null
                    : { "Sell Cargo 201 Response": v.sellCargo201Response }),
            };
        });
}
