/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type CreateShipShipScanSecurity = {
    agentToken: string;
};

export type CreateShipShipScanRequest = {
    /**
     * The ship symbol.
     */
    shipSymbol: string;
};

export type CreateShipShipScanData = {
    /**
     * A cooldown is a period of time in which a ship cannot perform certain actions.
     */
    cooldown: components.CooldownJson;
    /**
     * List of scanned ships.
     */
    ships: Array<components.ScannedShipJson>;
};

/**
 * Successfully scanned for nearby ships.
 */
export type CreateShipShipScanResponseBody = {
    data: CreateShipShipScanData;
};

export type CreateShipShipScanResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successfully scanned for nearby ships.
     */
    object?: CreateShipShipScanResponseBody | undefined;
};

/** @internal */
export namespace CreateShipShipScanSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<CreateShipShipScanSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateShipShipScanSecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export namespace CreateShipShipScanRequest$ {
    export type Inbound = {
        shipSymbol: string;
    };

    export const inboundSchema: z.ZodType<CreateShipShipScanRequest, z.ZodTypeDef, Inbound> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });

    export type Outbound = {
        shipSymbol: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateShipShipScanRequest> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });
}

/** @internal */
export namespace CreateShipShipScanData$ {
    export type Inbound = {
        cooldown: components.CooldownJson$.Inbound;
        ships: Array<components.ScannedShipJson$.Inbound>;
    };

    export const inboundSchema: z.ZodType<CreateShipShipScanData, z.ZodTypeDef, Inbound> = z
        .object({
            cooldown: components.CooldownJson$.inboundSchema,
            ships: z.array(components.ScannedShipJson$.inboundSchema),
        })
        .transform((v) => {
            return {
                cooldown: v.cooldown,
                ships: v.ships,
            };
        });

    export type Outbound = {
        cooldown: components.CooldownJson$.Outbound;
        ships: Array<components.ScannedShipJson$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateShipShipScanData> = z
        .object({
            cooldown: components.CooldownJson$.outboundSchema,
            ships: z.array(components.ScannedShipJson$.outboundSchema),
        })
        .transform((v) => {
            return {
                cooldown: v.cooldown,
                ships: v.ships,
            };
        });
}

/** @internal */
export namespace CreateShipShipScanResponseBody$ {
    export type Inbound = {
        data: CreateShipShipScanData$.Inbound;
    };

    export const inboundSchema: z.ZodType<CreateShipShipScanResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => CreateShipShipScanData$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: CreateShipShipScanData$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateShipShipScanResponseBody> =
        z
            .object({
                data: z.lazy(() => CreateShipShipScanData$.outboundSchema),
            })
            .transform((v) => {
                return {
                    data: v.data,
                };
            });
}

/** @internal */
export namespace CreateShipShipScanResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: CreateShipShipScanResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CreateShipShipScanResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => CreateShipShipScanResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: CreateShipShipScanResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateShipShipScanResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => CreateShipShipScanResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
