/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type OrbitShipSecurity = {
    agentToken: string;
};

export type OrbitShipRequest = {
    /**
     * The symbol of the ship.
     */
    shipSymbol: string;
};

export type OrbitShipData = {
    /**
     * The navigation information of the ship.
     */
    nav: components.ShipNavJson;
};

/**
 * The ship has successfully moved into orbit at its current location.
 */
export type OrbitShipOrbitShip200Response = {
    data: OrbitShipData;
};

export type OrbitShipResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * The ship has successfully moved into orbit at its current location.
     */
    orbitShip200Response?: OrbitShipOrbitShip200Response | undefined;
};

/** @internal */
export namespace OrbitShipSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<OrbitShipSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OrbitShipSecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export namespace OrbitShipRequest$ {
    export type Inbound = {
        shipSymbol: string;
    };

    export const inboundSchema: z.ZodType<OrbitShipRequest, z.ZodTypeDef, Inbound> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });

    export type Outbound = {
        shipSymbol: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OrbitShipRequest> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });
}

/** @internal */
export namespace OrbitShipData$ {
    export type Inbound = {
        nav: components.ShipNavJson$.Inbound;
    };

    export const inboundSchema: z.ZodType<OrbitShipData, z.ZodTypeDef, Inbound> = z
        .object({
            nav: components.ShipNavJson$.inboundSchema,
        })
        .transform((v) => {
            return {
                nav: v.nav,
            };
        });

    export type Outbound = {
        nav: components.ShipNavJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OrbitShipData> = z
        .object({
            nav: components.ShipNavJson$.outboundSchema,
        })
        .transform((v) => {
            return {
                nav: v.nav,
            };
        });
}

/** @internal */
export namespace OrbitShipOrbitShip200Response$ {
    export type Inbound = {
        data: OrbitShipData$.Inbound;
    };

    export const inboundSchema: z.ZodType<OrbitShipOrbitShip200Response, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => OrbitShipData$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: OrbitShipData$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OrbitShipOrbitShip200Response> =
        z
            .object({
                data: z.lazy(() => OrbitShipData$.outboundSchema),
            })
            .transform((v) => {
                return {
                    data: v.data,
                };
            });
}

/** @internal */
export namespace OrbitShipResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        "Orbit Ship 200 Response"?: OrbitShipOrbitShip200Response$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<OrbitShipResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            "Orbit Ship 200 Response": z
                .lazy(() => OrbitShipOrbitShip200Response$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v["Orbit Ship 200 Response"] === undefined
                    ? null
                    : { orbitShip200Response: v["Orbit Ship 200 Response"] }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        "Orbit Ship 200 Response"?: OrbitShipOrbitShip200Response$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OrbitShipResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            orbitShip200Response: z
                .lazy(() => OrbitShipOrbitShip200Response$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.orbitShip200Response === undefined
                    ? null
                    : { "Orbit Ship 200 Response": v.orbitShip200Response }),
            };
        });
}
