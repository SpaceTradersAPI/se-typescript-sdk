/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type CreateShipWaypointScanSecurity = {
    agentToken: string;
};

export type CreateShipWaypointScanRequest = {
    /**
     * The ship symbol.
     */
    shipSymbol: string;
};

export type CreateShipWaypointScanData = {
    /**
     * A cooldown is a period of time in which a ship cannot perform certain actions.
     */
    cooldown: components.CooldownJson;
    /**
     * List of scanned waypoints.
     */
    waypoints: Array<components.ScannedWaypointJson>;
};

/**
 * Successfully scanned for nearby waypoints.
 */
export type CreateShipWaypointScanResponseBody = {
    data: CreateShipWaypointScanData;
};

export type CreateShipWaypointScanResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successfully scanned for nearby waypoints.
     */
    object?: CreateShipWaypointScanResponseBody | undefined;
};

/** @internal */
export namespace CreateShipWaypointScanSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<CreateShipWaypointScanSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateShipWaypointScanSecurity> =
        z
            .object({
                agentToken: z.string(),
            })
            .transform((v) => {
                return {
                    AgentToken: v.agentToken,
                };
            });
}

/** @internal */
export namespace CreateShipWaypointScanRequest$ {
    export type Inbound = {
        shipSymbol: string;
    };

    export const inboundSchema: z.ZodType<CreateShipWaypointScanRequest, z.ZodTypeDef, Inbound> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });

    export type Outbound = {
        shipSymbol: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateShipWaypointScanRequest> =
        z
            .object({
                shipSymbol: z.string(),
            })
            .transform((v) => {
                return {
                    shipSymbol: v.shipSymbol,
                };
            });
}

/** @internal */
export namespace CreateShipWaypointScanData$ {
    export type Inbound = {
        cooldown: components.CooldownJson$.Inbound;
        waypoints: Array<components.ScannedWaypointJson$.Inbound>;
    };

    export const inboundSchema: z.ZodType<CreateShipWaypointScanData, z.ZodTypeDef, Inbound> = z
        .object({
            cooldown: components.CooldownJson$.inboundSchema,
            waypoints: z.array(components.ScannedWaypointJson$.inboundSchema),
        })
        .transform((v) => {
            return {
                cooldown: v.cooldown,
                waypoints: v.waypoints,
            };
        });

    export type Outbound = {
        cooldown: components.CooldownJson$.Outbound;
        waypoints: Array<components.ScannedWaypointJson$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateShipWaypointScanData> = z
        .object({
            cooldown: components.CooldownJson$.outboundSchema,
            waypoints: z.array(components.ScannedWaypointJson$.outboundSchema),
        })
        .transform((v) => {
            return {
                cooldown: v.cooldown,
                waypoints: v.waypoints,
            };
        });
}

/** @internal */
export namespace CreateShipWaypointScanResponseBody$ {
    export type Inbound = {
        data: CreateShipWaypointScanData$.Inbound;
    };

    export const inboundSchema: z.ZodType<
        CreateShipWaypointScanResponseBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            data: z.lazy(() => CreateShipWaypointScanData$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: CreateShipWaypointScanData$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateShipWaypointScanResponseBody
    > = z
        .object({
            data: z.lazy(() => CreateShipWaypointScanData$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace CreateShipWaypointScanResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: CreateShipWaypointScanResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CreateShipWaypointScanResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => CreateShipWaypointScanResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: CreateShipWaypointScanResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateShipWaypointScanResponse> =
        z
            .object({
                httpMeta: components.HTTPMetadata$.outboundSchema,
                object: z.lazy(() => CreateShipWaypointScanResponseBody$.outboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    HttpMeta: v.httpMeta,
                    ...(v.object === undefined ? null : { object: v.object }),
                };
            });
}
