/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type TransferCargoSecurity = {
    agentToken: string;
};

export type TransferCargoTransferCargoRequest = {
    /**
     * The good's symbol.
     */
    tradeSymbol: components.TradeSymbolJson;
    /**
     * Amount of units to transfer.
     */
    units: number;
    /**
     * The symbol of the ship to transfer to.
     */
    shipSymbol: string;
};

export type TransferCargoRequest = {
    /**
     * The transferring ship's symbol.
     */
    shipSymbol: string;
    requestBody?: TransferCargoTransferCargoRequest | undefined;
};

export type TransferCargoData = {
    /**
     * Ship cargo details.
     */
    cargo: components.ShipCargoJson;
};

/**
 * Transfer successful.
 */
export type TransferCargoTransferCargo200Response = {
    data: TransferCargoData;
};

export type TransferCargoResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Transfer successful.
     */
    transferCargo200Response?: TransferCargoTransferCargo200Response | undefined;
};

/** @internal */
export namespace TransferCargoSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<TransferCargoSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferCargoSecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export namespace TransferCargoTransferCargoRequest$ {
    export type Inbound = {
        tradeSymbol: components.TradeSymbolJson;
        units: number;
        shipSymbol: string;
    };

    export const inboundSchema: z.ZodType<
        TransferCargoTransferCargoRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            tradeSymbol: components.TradeSymbolJson$,
            units: z.number().int(),
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                tradeSymbol: v.tradeSymbol,
                units: v.units,
                shipSymbol: v.shipSymbol,
            };
        });

    export type Outbound = {
        tradeSymbol: components.TradeSymbolJson;
        units: number;
        shipSymbol: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TransferCargoTransferCargoRequest
    > = z
        .object({
            tradeSymbol: components.TradeSymbolJson$,
            units: z.number().int(),
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                tradeSymbol: v.tradeSymbol,
                units: v.units,
                shipSymbol: v.shipSymbol,
            };
        });
}

/** @internal */
export namespace TransferCargoRequest$ {
    export type Inbound = {
        shipSymbol: string;
        RequestBody?: TransferCargoTransferCargoRequest$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<TransferCargoRequest, z.ZodTypeDef, Inbound> = z
        .object({
            shipSymbol: z.string(),
            RequestBody: z.lazy(() => TransferCargoTransferCargoRequest$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        shipSymbol: string;
        RequestBody?: TransferCargoTransferCargoRequest$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferCargoRequest> = z
        .object({
            shipSymbol: z.string(),
            requestBody: z.lazy(() => TransferCargoTransferCargoRequest$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace TransferCargoData$ {
    export type Inbound = {
        cargo: components.ShipCargoJson$.Inbound;
    };

    export const inboundSchema: z.ZodType<TransferCargoData, z.ZodTypeDef, Inbound> = z
        .object({
            cargo: components.ShipCargoJson$.inboundSchema,
        })
        .transform((v) => {
            return {
                cargo: v.cargo,
            };
        });

    export type Outbound = {
        cargo: components.ShipCargoJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferCargoData> = z
        .object({
            cargo: components.ShipCargoJson$.outboundSchema,
        })
        .transform((v) => {
            return {
                cargo: v.cargo,
            };
        });
}

/** @internal */
export namespace TransferCargoTransferCargo200Response$ {
    export type Inbound = {
        data: TransferCargoData$.Inbound;
    };

    export const inboundSchema: z.ZodType<
        TransferCargoTransferCargo200Response,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            data: z.lazy(() => TransferCargoData$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: TransferCargoData$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TransferCargoTransferCargo200Response
    > = z
        .object({
            data: z.lazy(() => TransferCargoData$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace TransferCargoResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        "Transfer Cargo 200 Response"?: TransferCargoTransferCargo200Response$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<TransferCargoResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            "Transfer Cargo 200 Response": z
                .lazy(() => TransferCargoTransferCargo200Response$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v["Transfer Cargo 200 Response"] === undefined
                    ? null
                    : { transferCargo200Response: v["Transfer Cargo 200 Response"] }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        "Transfer Cargo 200 Response"?: TransferCargoTransferCargo200Response$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferCargoResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            transferCargo200Response: z
                .lazy(() => TransferCargoTransferCargo200Response$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.transferCargo200Response === undefined
                    ? null
                    : { "Transfer Cargo 200 Response": v.transferCargo200Response }),
            };
        });
}
