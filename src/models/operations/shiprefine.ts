/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type ShipRefineSecurity = {
    agentToken: string;
};

/**
 * The type of good to produce out of the refining process.
 */
export enum Produce {
    Iron = "IRON",
    Copper = "COPPER",
    Silver = "SILVER",
    Gold = "GOLD",
    Aluminum = "ALUMINUM",
    Platinum = "PLATINUM",
    Uranite = "URANITE",
    Meritium = "MERITIUM",
    Fuel = "FUEL",
}

export type ShipRefineRequestBody = {
    /**
     * The type of good to produce out of the refining process.
     */
    produce: Produce;
};

export type ShipRefineRequest = {
    /**
     * The symbol of the ship.
     */
    shipSymbol: string;
    requestBody?: ShipRefineRequestBody | undefined;
};

export type Produced = {
    /**
     * Symbol of the good.
     */
    tradeSymbol: string;
    /**
     * Amount of units of the good.
     */
    units: number;
};

export type Consumed = {
    /**
     * Symbol of the good.
     */
    tradeSymbol: string;
    /**
     * Amount of units of the good.
     */
    units: number;
};

export type ShipRefineData = {
    /**
     * Ship cargo details.
     */
    cargo: components.ShipCargoJson;
    /**
     * A cooldown is a period of time in which a ship cannot perform certain actions.
     */
    cooldown: components.CooldownJson;
    /**
     * Goods that were produced by this refining process.
     */
    produced: Array<Produced>;
    /**
     * Goods that were consumed during this refining process.
     */
    consumed: Array<Consumed>;
};

/**
 * The ship has successfully refined goods.
 */
export type ShipRefineShipRefine201Response = {
    data: ShipRefineData;
};

export type ShipRefineResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * The ship has successfully refined goods.
     */
    shipRefine201Response?: ShipRefineShipRefine201Response | undefined;
};

/** @internal */
export namespace ShipRefineSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<ShipRefineSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ShipRefineSecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export const Produce$ = z.nativeEnum(Produce);

/** @internal */
export namespace ShipRefineRequestBody$ {
    export type Inbound = {
        produce: Produce;
    };

    export const inboundSchema: z.ZodType<ShipRefineRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            produce: Produce$,
        })
        .transform((v) => {
            return {
                produce: v.produce,
            };
        });

    export type Outbound = {
        produce: Produce;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ShipRefineRequestBody> = z
        .object({
            produce: Produce$,
        })
        .transform((v) => {
            return {
                produce: v.produce,
            };
        });
}

/** @internal */
export namespace ShipRefineRequest$ {
    export type Inbound = {
        shipSymbol: string;
        RequestBody?: ShipRefineRequestBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ShipRefineRequest, z.ZodTypeDef, Inbound> = z
        .object({
            shipSymbol: z.string(),
            RequestBody: z.lazy(() => ShipRefineRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        shipSymbol: string;
        RequestBody?: ShipRefineRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ShipRefineRequest> = z
        .object({
            shipSymbol: z.string(),
            requestBody: z.lazy(() => ShipRefineRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace Produced$ {
    export type Inbound = {
        tradeSymbol: string;
        units: number;
    };

    export const inboundSchema: z.ZodType<Produced, z.ZodTypeDef, Inbound> = z
        .object({
            tradeSymbol: z.string(),
            units: z.number().int(),
        })
        .transform((v) => {
            return {
                tradeSymbol: v.tradeSymbol,
                units: v.units,
            };
        });

    export type Outbound = {
        tradeSymbol: string;
        units: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Produced> = z
        .object({
            tradeSymbol: z.string(),
            units: z.number().int(),
        })
        .transform((v) => {
            return {
                tradeSymbol: v.tradeSymbol,
                units: v.units,
            };
        });
}

/** @internal */
export namespace Consumed$ {
    export type Inbound = {
        tradeSymbol: string;
        units: number;
    };

    export const inboundSchema: z.ZodType<Consumed, z.ZodTypeDef, Inbound> = z
        .object({
            tradeSymbol: z.string(),
            units: z.number().int(),
        })
        .transform((v) => {
            return {
                tradeSymbol: v.tradeSymbol,
                units: v.units,
            };
        });

    export type Outbound = {
        tradeSymbol: string;
        units: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Consumed> = z
        .object({
            tradeSymbol: z.string(),
            units: z.number().int(),
        })
        .transform((v) => {
            return {
                tradeSymbol: v.tradeSymbol,
                units: v.units,
            };
        });
}

/** @internal */
export namespace ShipRefineData$ {
    export type Inbound = {
        cargo: components.ShipCargoJson$.Inbound;
        cooldown: components.CooldownJson$.Inbound;
        produced: Array<Produced$.Inbound>;
        consumed: Array<Consumed$.Inbound>;
    };

    export const inboundSchema: z.ZodType<ShipRefineData, z.ZodTypeDef, Inbound> = z
        .object({
            cargo: components.ShipCargoJson$.inboundSchema,
            cooldown: components.CooldownJson$.inboundSchema,
            produced: z.array(z.lazy(() => Produced$.inboundSchema)),
            consumed: z.array(z.lazy(() => Consumed$.inboundSchema)),
        })
        .transform((v) => {
            return {
                cargo: v.cargo,
                cooldown: v.cooldown,
                produced: v.produced,
                consumed: v.consumed,
            };
        });

    export type Outbound = {
        cargo: components.ShipCargoJson$.Outbound;
        cooldown: components.CooldownJson$.Outbound;
        produced: Array<Produced$.Outbound>;
        consumed: Array<Consumed$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ShipRefineData> = z
        .object({
            cargo: components.ShipCargoJson$.outboundSchema,
            cooldown: components.CooldownJson$.outboundSchema,
            produced: z.array(z.lazy(() => Produced$.outboundSchema)),
            consumed: z.array(z.lazy(() => Consumed$.outboundSchema)),
        })
        .transform((v) => {
            return {
                cargo: v.cargo,
                cooldown: v.cooldown,
                produced: v.produced,
                consumed: v.consumed,
            };
        });
}

/** @internal */
export namespace ShipRefineShipRefine201Response$ {
    export type Inbound = {
        data: ShipRefineData$.Inbound;
    };

    export const inboundSchema: z.ZodType<ShipRefineShipRefine201Response, z.ZodTypeDef, Inbound> =
        z
            .object({
                data: z.lazy(() => ShipRefineData$.inboundSchema),
            })
            .transform((v) => {
                return {
                    data: v.data,
                };
            });

    export type Outbound = {
        data: ShipRefineData$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ShipRefineShipRefine201Response
    > = z
        .object({
            data: z.lazy(() => ShipRefineData$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace ShipRefineResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        "Ship Refine 201 Response"?: ShipRefineShipRefine201Response$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ShipRefineResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            "Ship Refine 201 Response": z
                .lazy(() => ShipRefineShipRefine201Response$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v["Ship Refine 201 Response"] === undefined
                    ? null
                    : { shipRefine201Response: v["Ship Refine 201 Response"] }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        "Ship Refine 201 Response"?: ShipRefineShipRefine201Response$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ShipRefineResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            shipRefine201Response: z
                .lazy(() => ShipRefineShipRefine201Response$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.shipRefine201Response === undefined
                    ? null
                    : { "Ship Refine 201 Response": v.shipRefine201Response }),
            };
        });
}
