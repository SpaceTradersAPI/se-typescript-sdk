/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type PatchShipNavSecurity = {
    agentToken: string;
};

export type PatchShipNavRequestBody = {
    /**
     * The ship's set speed when traveling between waypoints or systems.
     */
    flightMode?: components.ShipNavFlightModeJson | undefined;
};

export type PatchShipNavRequest = {
    /**
     * The ship symbol.
     */
    shipSymbol: string;
    requestBody?: PatchShipNavRequestBody | undefined;
};

/**
 * The updated nav data of the ship.
 */
export type PatchShipNavResponseBody = {
    /**
     * The navigation information of the ship.
     */
    data: components.ShipNavJson;
};

export type PatchShipNavResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * The updated nav data of the ship.
     */
    object?: PatchShipNavResponseBody | undefined;
};

/** @internal */
export namespace PatchShipNavSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<PatchShipNavSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchShipNavSecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export namespace PatchShipNavRequestBody$ {
    export type Inbound = {
        flightMode?: components.ShipNavFlightModeJson | undefined;
    };

    export const inboundSchema: z.ZodType<PatchShipNavRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            flightMode: components.ShipNavFlightModeJson$.default(
                components.ShipNavFlightModeJson.Cruise
            ),
        })
        .transform((v) => {
            return {
                flightMode: v.flightMode,
            };
        });

    export type Outbound = {
        flightMode: components.ShipNavFlightModeJson;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchShipNavRequestBody> = z
        .object({
            flightMode: components.ShipNavFlightModeJson$.default(
                components.ShipNavFlightModeJson.Cruise
            ),
        })
        .transform((v) => {
            return {
                flightMode: v.flightMode,
            };
        });
}

/** @internal */
export namespace PatchShipNavRequest$ {
    export type Inbound = {
        shipSymbol: string;
        RequestBody?: PatchShipNavRequestBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchShipNavRequest, z.ZodTypeDef, Inbound> = z
        .object({
            shipSymbol: z.string(),
            RequestBody: z.lazy(() => PatchShipNavRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        shipSymbol: string;
        RequestBody?: PatchShipNavRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchShipNavRequest> = z
        .object({
            shipSymbol: z.string(),
            requestBody: z.lazy(() => PatchShipNavRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace PatchShipNavResponseBody$ {
    export type Inbound = {
        data: components.ShipNavJson$.Inbound;
    };

    export const inboundSchema: z.ZodType<PatchShipNavResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: components.ShipNavJson$.inboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: components.ShipNavJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchShipNavResponseBody> = z
        .object({
            data: components.ShipNavJson$.outboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace PatchShipNavResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: PatchShipNavResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchShipNavResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => PatchShipNavResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: PatchShipNavResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchShipNavResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => PatchShipNavResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
