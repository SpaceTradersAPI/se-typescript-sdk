/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type GetContractSecurity = {
    agentToken: string;
};

export type GetContractRequest = {
    /**
     * The contract ID
     */
    contractId: string;
};

/**
 * Successfully fetched contract.
 */
export type GetContractResponseBody = {
    /**
     * Contract details.
     */
    data: components.ContractJson;
};

export type GetContractResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successfully fetched contract.
     */
    object?: GetContractResponseBody | undefined;
};

/** @internal */
export namespace GetContractSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<GetContractSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetContractSecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export namespace GetContractRequest$ {
    export type Inbound = {
        contractId: string;
    };

    export const inboundSchema: z.ZodType<GetContractRequest, z.ZodTypeDef, Inbound> = z
        .object({
            contractId: z.string(),
        })
        .transform((v) => {
            return {
                contractId: v.contractId,
            };
        });

    export type Outbound = {
        contractId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetContractRequest> = z
        .object({
            contractId: z.string(),
        })
        .transform((v) => {
            return {
                contractId: v.contractId,
            };
        });
}

/** @internal */
export namespace GetContractResponseBody$ {
    export type Inbound = {
        data: components.ContractJson$.Inbound;
    };

    export const inboundSchema: z.ZodType<GetContractResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: components.ContractJson$.inboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: components.ContractJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetContractResponseBody> = z
        .object({
            data: components.ContractJson$.outboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace GetContractResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: GetContractResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetContractResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => GetContractResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: GetContractResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetContractResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => GetContractResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
