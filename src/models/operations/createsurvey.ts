/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type CreateSurveySecurity = {
    agentToken: string;
};

export type CreateSurveyRequest = {
    /**
     * The symbol of the ship.
     */
    shipSymbol: string;
};

export type CreateSurveyData = {
    /**
     * A cooldown is a period of time in which a ship cannot perform certain actions.
     */
    cooldown: components.CooldownJson;
    /**
     * Surveys created by this action.
     */
    surveys: Array<components.SurveyJson>;
};

/**
 * Surveys has been created.
 */
export type CreateSurveyResponseBody = {
    data: CreateSurveyData;
};

export type CreateSurveyResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Surveys has been created.
     */
    object?: CreateSurveyResponseBody | undefined;
};

/** @internal */
export namespace CreateSurveySecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<CreateSurveySecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateSurveySecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export namespace CreateSurveyRequest$ {
    export type Inbound = {
        shipSymbol: string;
    };

    export const inboundSchema: z.ZodType<CreateSurveyRequest, z.ZodTypeDef, Inbound> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });

    export type Outbound = {
        shipSymbol: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateSurveyRequest> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });
}

/** @internal */
export namespace CreateSurveyData$ {
    export type Inbound = {
        cooldown: components.CooldownJson$.Inbound;
        surveys: Array<components.SurveyJson$.Inbound>;
    };

    export const inboundSchema: z.ZodType<CreateSurveyData, z.ZodTypeDef, Inbound> = z
        .object({
            cooldown: components.CooldownJson$.inboundSchema,
            surveys: z.array(components.SurveyJson$.inboundSchema),
        })
        .transform((v) => {
            return {
                cooldown: v.cooldown,
                surveys: v.surveys,
            };
        });

    export type Outbound = {
        cooldown: components.CooldownJson$.Outbound;
        surveys: Array<components.SurveyJson$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateSurveyData> = z
        .object({
            cooldown: components.CooldownJson$.outboundSchema,
            surveys: z.array(components.SurveyJson$.outboundSchema),
        })
        .transform((v) => {
            return {
                cooldown: v.cooldown,
                surveys: v.surveys,
            };
        });
}

/** @internal */
export namespace CreateSurveyResponseBody$ {
    export type Inbound = {
        data: CreateSurveyData$.Inbound;
    };

    export const inboundSchema: z.ZodType<CreateSurveyResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => CreateSurveyData$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: CreateSurveyData$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateSurveyResponseBody> = z
        .object({
            data: z.lazy(() => CreateSurveyData$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace CreateSurveyResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: CreateSurveyResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CreateSurveyResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => CreateSurveyResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: CreateSurveyResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateSurveyResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => CreateSurveyResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
