/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type RegisterRequestBody = {
    /**
     * The symbol of the faction.
     */
    faction: components.FactionSymbolJson;
    /**
     * Your desired agent symbol. This will be a unique name used to represent your agent, and will be the prefix for your ships.
     */
    symbol: string;
    /**
     * Your email address. This is used if you reserved your call sign between resets.
     */
    email?: string | undefined;
};

export type Data = {
    /**
     * Agent details.
     */
    agent: components.AgentJson;
    /**
     * Contract details.
     */
    contract: components.ContractJson;
    /**
     * Faction details.
     */
    faction: components.FactionJson;
    /**
     * Ship details.
     */
    ship: components.ShipJson;
    /**
     * A Bearer token for accessing secured API endpoints.
     */
    token: string;
};

/**
 * Succesfully registered.
 */
export type RegisterResponseBody = {
    data: Data;
};

export type RegisterResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Succesfully registered.
     */
    object?: RegisterResponseBody | undefined;
};

/** @internal */
export namespace RegisterRequestBody$ {
    export type Inbound = {
        faction: components.FactionSymbolJson;
        symbol: string;
        email?: string | undefined;
    };

    export const inboundSchema: z.ZodType<RegisterRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            faction: components.FactionSymbolJson$,
            symbol: z.string(),
            email: z.string().optional(),
        })
        .transform((v) => {
            return {
                faction: v.faction,
                symbol: v.symbol,
                ...(v.email === undefined ? null : { email: v.email }),
            };
        });

    export type Outbound = {
        faction: components.FactionSymbolJson;
        symbol: string;
        email?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RegisterRequestBody> = z
        .object({
            faction: components.FactionSymbolJson$,
            symbol: z.string(),
            email: z.string().optional(),
        })
        .transform((v) => {
            return {
                faction: v.faction,
                symbol: v.symbol,
                ...(v.email === undefined ? null : { email: v.email }),
            };
        });
}

/** @internal */
export namespace Data$ {
    export type Inbound = {
        agent: components.AgentJson$.Inbound;
        contract: components.ContractJson$.Inbound;
        faction: components.FactionJson$.Inbound;
        ship: components.ShipJson$.Inbound;
        token: string;
    };

    export const inboundSchema: z.ZodType<Data, z.ZodTypeDef, Inbound> = z
        .object({
            agent: components.AgentJson$.inboundSchema,
            contract: components.ContractJson$.inboundSchema,
            faction: components.FactionJson$.inboundSchema,
            ship: components.ShipJson$.inboundSchema,
            token: z.string(),
        })
        .transform((v) => {
            return {
                agent: v.agent,
                contract: v.contract,
                faction: v.faction,
                ship: v.ship,
                token: v.token,
            };
        });

    export type Outbound = {
        agent: components.AgentJson$.Outbound;
        contract: components.ContractJson$.Outbound;
        faction: components.FactionJson$.Outbound;
        ship: components.ShipJson$.Outbound;
        token: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Data> = z
        .object({
            agent: components.AgentJson$.outboundSchema,
            contract: components.ContractJson$.outboundSchema,
            faction: components.FactionJson$.outboundSchema,
            ship: components.ShipJson$.outboundSchema,
            token: z.string(),
        })
        .transform((v) => {
            return {
                agent: v.agent,
                contract: v.contract,
                faction: v.faction,
                ship: v.ship,
                token: v.token,
            };
        });
}

/** @internal */
export namespace RegisterResponseBody$ {
    export type Inbound = {
        data: Data$.Inbound;
    };

    export const inboundSchema: z.ZodType<RegisterResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => Data$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: Data$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RegisterResponseBody> = z
        .object({
            data: z.lazy(() => Data$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace RegisterResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: RegisterResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<RegisterResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => RegisterResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: RegisterResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RegisterResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => RegisterResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
