/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type ScrapShipSecurity = {
    agentToken: string;
};

export type ScrapShipRequest = {
    /**
     * The ship symbol.
     */
    shipSymbol: string;
};

export type ScrapShipData = {
    /**
     * Agent details.
     */
    agent: components.AgentJson;
    /**
     * Result of a scrap transaction.
     */
    transaction: components.ScrapTransactionJson;
};

/**
 * Ship scrapped successfully.
 */
export type ScrapShipResponseBody = {
    data: ScrapShipData;
};

export type ScrapShipResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Ship scrapped successfully.
     */
    object?: ScrapShipResponseBody | undefined;
};

/** @internal */
export namespace ScrapShipSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<ScrapShipSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ScrapShipSecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export namespace ScrapShipRequest$ {
    export type Inbound = {
        shipSymbol: string;
    };

    export const inboundSchema: z.ZodType<ScrapShipRequest, z.ZodTypeDef, Inbound> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });

    export type Outbound = {
        shipSymbol: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ScrapShipRequest> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });
}

/** @internal */
export namespace ScrapShipData$ {
    export type Inbound = {
        agent: components.AgentJson$.Inbound;
        transaction: components.ScrapTransactionJson$.Inbound;
    };

    export const inboundSchema: z.ZodType<ScrapShipData, z.ZodTypeDef, Inbound> = z
        .object({
            agent: components.AgentJson$.inboundSchema,
            transaction: components.ScrapTransactionJson$.inboundSchema,
        })
        .transform((v) => {
            return {
                agent: v.agent,
                transaction: v.transaction,
            };
        });

    export type Outbound = {
        agent: components.AgentJson$.Outbound;
        transaction: components.ScrapTransactionJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ScrapShipData> = z
        .object({
            agent: components.AgentJson$.outboundSchema,
            transaction: components.ScrapTransactionJson$.outboundSchema,
        })
        .transform((v) => {
            return {
                agent: v.agent,
                transaction: v.transaction,
            };
        });
}

/** @internal */
export namespace ScrapShipResponseBody$ {
    export type Inbound = {
        data: ScrapShipData$.Inbound;
    };

    export const inboundSchema: z.ZodType<ScrapShipResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => ScrapShipData$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: ScrapShipData$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ScrapShipResponseBody> = z
        .object({
            data: z.lazy(() => ScrapShipData$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace ScrapShipResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: ScrapShipResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ScrapShipResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => ScrapShipResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: ScrapShipResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ScrapShipResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => ScrapShipResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
