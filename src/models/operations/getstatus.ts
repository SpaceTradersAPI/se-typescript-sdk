/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type Stats = {
    /**
     * Number of registered agents in the game.
     */
    agents: number;
    /**
     * Total number of ships in the game.
     */
    ships: number;
    /**
     * Total number of systems in the game.
     */
    systems: number;
    /**
     * Total number of waypoints in the game.
     */
    waypoints: number;
};

export type MostCredits = {
    /**
     * Symbol of the agent.
     */
    agentSymbol: string;
    /**
     * Amount of credits.
     */
    credits: number;
};

export type MostSubmittedCharts = {
    /**
     * Symbol of the agent.
     */
    agentSymbol: string;
    /**
     * Amount of charts done by the agent.
     */
    chartCount: number;
};

export type Leaderboards = {
    /**
     * Top agents with the most credits.
     */
    mostCredits: Array<MostCredits>;
    /**
     * Top agents with the most charted submitted.
     */
    mostSubmittedCharts: Array<MostSubmittedCharts>;
};

export type ServerResets = {
    /**
     * The date and time when the game server will reset.
     */
    next: string;
    /**
     * How often we intend to reset the game server.
     */
    frequency: string;
};

export type Announcements = {
    title: string;
    body: string;
};

export type Links = {
    name: string;
    url: string;
};

/**
 * Fetched status successfully.
 */
export type GetStatusResponseBody = {
    /**
     * The current status of the game server.
     */
    status: string;
    /**
     * The current version of the API.
     */
    version: string;
    /**
     * The date when the game server was last reset.
     */
    resetDate: string;
    description: string;
    stats: Stats;
    leaderboards: Leaderboards;
    serverResets: ServerResets;
    announcements: Array<Announcements>;
    links: Array<Links>;
};

export type GetStatusResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Fetched status successfully.
     */
    object?: GetStatusResponseBody | undefined;
};

/** @internal */
export namespace Stats$ {
    export type Inbound = {
        agents: number;
        ships: number;
        systems: number;
        waypoints: number;
    };

    export const inboundSchema: z.ZodType<Stats, z.ZodTypeDef, Inbound> = z
        .object({
            agents: z.number().int(),
            ships: z.number().int(),
            systems: z.number().int(),
            waypoints: z.number().int(),
        })
        .transform((v) => {
            return {
                agents: v.agents,
                ships: v.ships,
                systems: v.systems,
                waypoints: v.waypoints,
            };
        });

    export type Outbound = {
        agents: number;
        ships: number;
        systems: number;
        waypoints: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Stats> = z
        .object({
            agents: z.number().int(),
            ships: z.number().int(),
            systems: z.number().int(),
            waypoints: z.number().int(),
        })
        .transform((v) => {
            return {
                agents: v.agents,
                ships: v.ships,
                systems: v.systems,
                waypoints: v.waypoints,
            };
        });
}

/** @internal */
export namespace MostCredits$ {
    export type Inbound = {
        agentSymbol: string;
        credits: number;
    };

    export const inboundSchema: z.ZodType<MostCredits, z.ZodTypeDef, Inbound> = z
        .object({
            agentSymbol: z.string(),
            credits: z.number().int(),
        })
        .transform((v) => {
            return {
                agentSymbol: v.agentSymbol,
                credits: v.credits,
            };
        });

    export type Outbound = {
        agentSymbol: string;
        credits: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MostCredits> = z
        .object({
            agentSymbol: z.string(),
            credits: z.number().int(),
        })
        .transform((v) => {
            return {
                agentSymbol: v.agentSymbol,
                credits: v.credits,
            };
        });
}

/** @internal */
export namespace MostSubmittedCharts$ {
    export type Inbound = {
        agentSymbol: string;
        chartCount: number;
    };

    export const inboundSchema: z.ZodType<MostSubmittedCharts, z.ZodTypeDef, Inbound> = z
        .object({
            agentSymbol: z.string(),
            chartCount: z.number().int(),
        })
        .transform((v) => {
            return {
                agentSymbol: v.agentSymbol,
                chartCount: v.chartCount,
            };
        });

    export type Outbound = {
        agentSymbol: string;
        chartCount: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MostSubmittedCharts> = z
        .object({
            agentSymbol: z.string(),
            chartCount: z.number().int(),
        })
        .transform((v) => {
            return {
                agentSymbol: v.agentSymbol,
                chartCount: v.chartCount,
            };
        });
}

/** @internal */
export namespace Leaderboards$ {
    export type Inbound = {
        mostCredits: Array<MostCredits$.Inbound>;
        mostSubmittedCharts: Array<MostSubmittedCharts$.Inbound>;
    };

    export const inboundSchema: z.ZodType<Leaderboards, z.ZodTypeDef, Inbound> = z
        .object({
            mostCredits: z.array(z.lazy(() => MostCredits$.inboundSchema)),
            mostSubmittedCharts: z.array(z.lazy(() => MostSubmittedCharts$.inboundSchema)),
        })
        .transform((v) => {
            return {
                mostCredits: v.mostCredits,
                mostSubmittedCharts: v.mostSubmittedCharts,
            };
        });

    export type Outbound = {
        mostCredits: Array<MostCredits$.Outbound>;
        mostSubmittedCharts: Array<MostSubmittedCharts$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Leaderboards> = z
        .object({
            mostCredits: z.array(z.lazy(() => MostCredits$.outboundSchema)),
            mostSubmittedCharts: z.array(z.lazy(() => MostSubmittedCharts$.outboundSchema)),
        })
        .transform((v) => {
            return {
                mostCredits: v.mostCredits,
                mostSubmittedCharts: v.mostSubmittedCharts,
            };
        });
}

/** @internal */
export namespace ServerResets$ {
    export type Inbound = {
        next: string;
        frequency: string;
    };

    export const inboundSchema: z.ZodType<ServerResets, z.ZodTypeDef, Inbound> = z
        .object({
            next: z.string(),
            frequency: z.string(),
        })
        .transform((v) => {
            return {
                next: v.next,
                frequency: v.frequency,
            };
        });

    export type Outbound = {
        next: string;
        frequency: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ServerResets> = z
        .object({
            next: z.string(),
            frequency: z.string(),
        })
        .transform((v) => {
            return {
                next: v.next,
                frequency: v.frequency,
            };
        });
}

/** @internal */
export namespace Announcements$ {
    export type Inbound = {
        title: string;
        body: string;
    };

    export const inboundSchema: z.ZodType<Announcements, z.ZodTypeDef, Inbound> = z
        .object({
            title: z.string(),
            body: z.string(),
        })
        .transform((v) => {
            return {
                title: v.title,
                body: v.body,
            };
        });

    export type Outbound = {
        title: string;
        body: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Announcements> = z
        .object({
            title: z.string(),
            body: z.string(),
        })
        .transform((v) => {
            return {
                title: v.title,
                body: v.body,
            };
        });
}

/** @internal */
export namespace Links$ {
    export type Inbound = {
        name: string;
        url: string;
    };

    export const inboundSchema: z.ZodType<Links, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
                url: v.url,
            };
        });

    export type Outbound = {
        name: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Links> = z
        .object({
            name: z.string(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
                url: v.url,
            };
        });
}

/** @internal */
export namespace GetStatusResponseBody$ {
    export type Inbound = {
        status: string;
        version: string;
        resetDate: string;
        description: string;
        stats: Stats$.Inbound;
        leaderboards: Leaderboards$.Inbound;
        serverResets: ServerResets$.Inbound;
        announcements: Array<Announcements$.Inbound>;
        links: Array<Links$.Inbound>;
    };

    export const inboundSchema: z.ZodType<GetStatusResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            status: z.string(),
            version: z.string(),
            resetDate: z.string(),
            description: z.string(),
            stats: z.lazy(() => Stats$.inboundSchema),
            leaderboards: z.lazy(() => Leaderboards$.inboundSchema),
            serverResets: z.lazy(() => ServerResets$.inboundSchema),
            announcements: z.array(z.lazy(() => Announcements$.inboundSchema)),
            links: z.array(z.lazy(() => Links$.inboundSchema)),
        })
        .transform((v) => {
            return {
                status: v.status,
                version: v.version,
                resetDate: v.resetDate,
                description: v.description,
                stats: v.stats,
                leaderboards: v.leaderboards,
                serverResets: v.serverResets,
                announcements: v.announcements,
                links: v.links,
            };
        });

    export type Outbound = {
        status: string;
        version: string;
        resetDate: string;
        description: string;
        stats: Stats$.Outbound;
        leaderboards: Leaderboards$.Outbound;
        serverResets: ServerResets$.Outbound;
        announcements: Array<Announcements$.Outbound>;
        links: Array<Links$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetStatusResponseBody> = z
        .object({
            status: z.string(),
            version: z.string(),
            resetDate: z.string(),
            description: z.string(),
            stats: z.lazy(() => Stats$.outboundSchema),
            leaderboards: z.lazy(() => Leaderboards$.outboundSchema),
            serverResets: z.lazy(() => ServerResets$.outboundSchema),
            announcements: z.array(z.lazy(() => Announcements$.outboundSchema)),
            links: z.array(z.lazy(() => Links$.outboundSchema)),
        })
        .transform((v) => {
            return {
                status: v.status,
                version: v.version,
                resetDate: v.resetDate,
                description: v.description,
                stats: v.stats,
                leaderboards: v.leaderboards,
                serverResets: v.serverResets,
                announcements: v.announcements,
                links: v.links,
            };
        });
}

/** @internal */
export namespace GetStatusResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: GetStatusResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetStatusResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => GetStatusResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: GetStatusResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetStatusResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => GetStatusResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
