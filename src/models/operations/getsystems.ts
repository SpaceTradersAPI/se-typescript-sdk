/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type GetSystemsRequest = {
    /**
     * What entry offset to request
     */
    page?: number | undefined;
    /**
     * How many entries to return per page
     */
    limit?: number | undefined;
};

/**
 * Successfully listed systems.
 */
export type GetSystemsResponseBody = {
    data: Array<components.SystemJson>;
    /**
     * Meta details for pagination.
     */
    meta: components.MetaJson;
};

export type GetSystemsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successfully listed systems.
     */
    object?: GetSystemsResponseBody | undefined;
};

/** @internal */
export namespace GetSystemsRequest$ {
    export type Inbound = {
        page?: number | undefined;
        limit?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetSystemsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            page: z.number().int().default(1),
            limit: z.number().int().default(10),
        })
        .transform((v) => {
            return {
                page: v.page,
                limit: v.limit,
            };
        });

    export type Outbound = {
        page: number;
        limit: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSystemsRequest> = z
        .object({
            page: z.number().int().default(1),
            limit: z.number().int().default(10),
        })
        .transform((v) => {
            return {
                page: v.page,
                limit: v.limit,
            };
        });
}

/** @internal */
export namespace GetSystemsResponseBody$ {
    export type Inbound = {
        data: Array<components.SystemJson$.Inbound>;
        meta: components.MetaJson$.Inbound;
    };

    export const inboundSchema: z.ZodType<GetSystemsResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.array(components.SystemJson$.inboundSchema),
            meta: components.MetaJson$.inboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
                meta: v.meta,
            };
        });

    export type Outbound = {
        data: Array<components.SystemJson$.Outbound>;
        meta: components.MetaJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSystemsResponseBody> = z
        .object({
            data: z.array(components.SystemJson$.outboundSchema),
            meta: components.MetaJson$.outboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
                meta: v.meta,
            };
        });
}

/** @internal */
export namespace GetSystemsResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: GetSystemsResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetSystemsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => GetSystemsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: GetSystemsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSystemsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => GetSystemsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
