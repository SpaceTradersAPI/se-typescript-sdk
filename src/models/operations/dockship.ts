/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type DockShipSecurity = {
    agentToken: string;
};

export type DockShipRequest = {
    /**
     * The symbol of the ship.
     */
    shipSymbol: string;
};

export type DockShipData = {
    /**
     * The navigation information of the ship.
     */
    nav: components.ShipNavJson;
};

/**
 * The ship has successfully docked at its current location.
 */
export type DockShipDockShip200Response = {
    data: DockShipData;
};

export type DockShipResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * The ship has successfully docked at its current location.
     */
    dockShip200Response?: DockShipDockShip200Response | undefined;
};

/** @internal */
export namespace DockShipSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<DockShipSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DockShipSecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export namespace DockShipRequest$ {
    export type Inbound = {
        shipSymbol: string;
    };

    export const inboundSchema: z.ZodType<DockShipRequest, z.ZodTypeDef, Inbound> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });

    export type Outbound = {
        shipSymbol: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DockShipRequest> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });
}

/** @internal */
export namespace DockShipData$ {
    export type Inbound = {
        nav: components.ShipNavJson$.Inbound;
    };

    export const inboundSchema: z.ZodType<DockShipData, z.ZodTypeDef, Inbound> = z
        .object({
            nav: components.ShipNavJson$.inboundSchema,
        })
        .transform((v) => {
            return {
                nav: v.nav,
            };
        });

    export type Outbound = {
        nav: components.ShipNavJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DockShipData> = z
        .object({
            nav: components.ShipNavJson$.outboundSchema,
        })
        .transform((v) => {
            return {
                nav: v.nav,
            };
        });
}

/** @internal */
export namespace DockShipDockShip200Response$ {
    export type Inbound = {
        data: DockShipData$.Inbound;
    };

    export const inboundSchema: z.ZodType<DockShipDockShip200Response, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => DockShipData$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: DockShipData$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DockShipDockShip200Response> = z
        .object({
            data: z.lazy(() => DockShipData$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace DockShipResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        "Dock Ship 200 Response"?: DockShipDockShip200Response$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<DockShipResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            "Dock Ship 200 Response": z
                .lazy(() => DockShipDockShip200Response$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v["Dock Ship 200 Response"] === undefined
                    ? null
                    : { dockShip200Response: v["Dock Ship 200 Response"] }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        "Dock Ship 200 Response"?: DockShipDockShip200Response$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DockShipResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            dockShip200Response: z
                .lazy(() => DockShipDockShip200Response$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.dockShip200Response === undefined
                    ? null
                    : { "Dock Ship 200 Response": v.dockShip200Response }),
            };
        });
}
