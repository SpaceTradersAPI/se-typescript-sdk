/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type NegotiateContractSecurity = {
    agentToken: string;
};

export type NegotiateContractRequest = {
    /**
     * The ship's symbol.
     */
    shipSymbol: string;
};

export type NegotiateContractData = {
    /**
     * Contract details.
     */
    contract: components.ContractJson;
};

/**
 * Successfully negotiated a new contract.
 */
export type NegotiateContractNegotiateContract200Response = {
    data: NegotiateContractData;
};

export type NegotiateContractResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successfully negotiated a new contract.
     */
    negotiateContract200Response?: NegotiateContractNegotiateContract200Response | undefined;
};

/** @internal */
export namespace NegotiateContractSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<NegotiateContractSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NegotiateContractSecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export namespace NegotiateContractRequest$ {
    export type Inbound = {
        shipSymbol: string;
    };

    export const inboundSchema: z.ZodType<NegotiateContractRequest, z.ZodTypeDef, Inbound> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });

    export type Outbound = {
        shipSymbol: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NegotiateContractRequest> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });
}

/** @internal */
export namespace NegotiateContractData$ {
    export type Inbound = {
        contract: components.ContractJson$.Inbound;
    };

    export const inboundSchema: z.ZodType<NegotiateContractData, z.ZodTypeDef, Inbound> = z
        .object({
            contract: components.ContractJson$.inboundSchema,
        })
        .transform((v) => {
            return {
                contract: v.contract,
            };
        });

    export type Outbound = {
        contract: components.ContractJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NegotiateContractData> = z
        .object({
            contract: components.ContractJson$.outboundSchema,
        })
        .transform((v) => {
            return {
                contract: v.contract,
            };
        });
}

/** @internal */
export namespace NegotiateContractNegotiateContract200Response$ {
    export type Inbound = {
        data: NegotiateContractData$.Inbound;
    };

    export const inboundSchema: z.ZodType<
        NegotiateContractNegotiateContract200Response,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            data: z.lazy(() => NegotiateContractData$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: NegotiateContractData$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NegotiateContractNegotiateContract200Response
    > = z
        .object({
            data: z.lazy(() => NegotiateContractData$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace NegotiateContractResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        "Negotiate Contract 200 Response"?:
            | NegotiateContractNegotiateContract200Response$.Inbound
            | undefined;
    };

    export const inboundSchema: z.ZodType<NegotiateContractResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            "Negotiate Contract 200 Response": z
                .lazy(() => NegotiateContractNegotiateContract200Response$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v["Negotiate Contract 200 Response"] === undefined
                    ? null
                    : { negotiateContract200Response: v["Negotiate Contract 200 Response"] }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        "Negotiate Contract 200 Response"?:
            | NegotiateContractNegotiateContract200Response$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NegotiateContractResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            negotiateContract200Response: z
                .lazy(() => NegotiateContractNegotiateContract200Response$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.negotiateContract200Response === undefined
                    ? null
                    : { "Negotiate Contract 200 Response": v.negotiateContract200Response }),
            };
        });
}
