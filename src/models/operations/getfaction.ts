/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type GetFactionRequest = {
    /**
     * The faction symbol
     */
    factionSymbol: string;
};

/**
 * Successfully fetched a faction.
 */
export type GetFactionResponseBody = {
    /**
     * Faction details.
     */
    data: components.FactionJson;
};

export type GetFactionResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successfully fetched a faction.
     */
    object?: GetFactionResponseBody | undefined;
};

/** @internal */
export namespace GetFactionRequest$ {
    export type Inbound = {
        factionSymbol: string;
    };

    export const inboundSchema: z.ZodType<GetFactionRequest, z.ZodTypeDef, Inbound> = z
        .object({
            factionSymbol: z.string(),
        })
        .transform((v) => {
            return {
                factionSymbol: v.factionSymbol,
            };
        });

    export type Outbound = {
        factionSymbol: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetFactionRequest> = z
        .object({
            factionSymbol: z.string(),
        })
        .transform((v) => {
            return {
                factionSymbol: v.factionSymbol,
            };
        });
}

/** @internal */
export namespace GetFactionResponseBody$ {
    export type Inbound = {
        data: components.FactionJson$.Inbound;
    };

    export const inboundSchema: z.ZodType<GetFactionResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: components.FactionJson$.inboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: components.FactionJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetFactionResponseBody> = z
        .object({
            data: components.FactionJson$.outboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace GetFactionResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: GetFactionResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetFactionResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => GetFactionResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: GetFactionResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetFactionResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => GetFactionResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
