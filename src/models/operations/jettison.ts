/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type JettisonSecurity = {
    agentToken: string;
};

export type JettisonRequestBody = {
    /**
     * The good's symbol.
     */
    symbol: components.TradeSymbolJson;
    /**
     * Amount of units to jettison of this good.
     */
    units: number;
};

export type JettisonRequest = {
    /**
     * The ship symbol.
     */
    shipSymbol: string;
    requestBody?: JettisonRequestBody | undefined;
};

export type JettisonData = {
    /**
     * Ship cargo details.
     */
    cargo: components.ShipCargoJson;
};

/**
 * Jettison successful.
 */
export type JettisonResponseBody = {
    data: JettisonData;
};

export type JettisonResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Jettison successful.
     */
    object?: JettisonResponseBody | undefined;
};

/** @internal */
export namespace JettisonSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<JettisonSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JettisonSecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export namespace JettisonRequestBody$ {
    export type Inbound = {
        symbol: components.TradeSymbolJson;
        units: number;
    };

    export const inboundSchema: z.ZodType<JettisonRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            symbol: components.TradeSymbolJson$,
            units: z.number().int(),
        })
        .transform((v) => {
            return {
                symbol: v.symbol,
                units: v.units,
            };
        });

    export type Outbound = {
        symbol: components.TradeSymbolJson;
        units: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JettisonRequestBody> = z
        .object({
            symbol: components.TradeSymbolJson$,
            units: z.number().int(),
        })
        .transform((v) => {
            return {
                symbol: v.symbol,
                units: v.units,
            };
        });
}

/** @internal */
export namespace JettisonRequest$ {
    export type Inbound = {
        shipSymbol: string;
        RequestBody?: JettisonRequestBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<JettisonRequest, z.ZodTypeDef, Inbound> = z
        .object({
            shipSymbol: z.string(),
            RequestBody: z.lazy(() => JettisonRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        shipSymbol: string;
        RequestBody?: JettisonRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JettisonRequest> = z
        .object({
            shipSymbol: z.string(),
            requestBody: z.lazy(() => JettisonRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace JettisonData$ {
    export type Inbound = {
        cargo: components.ShipCargoJson$.Inbound;
    };

    export const inboundSchema: z.ZodType<JettisonData, z.ZodTypeDef, Inbound> = z
        .object({
            cargo: components.ShipCargoJson$.inboundSchema,
        })
        .transform((v) => {
            return {
                cargo: v.cargo,
            };
        });

    export type Outbound = {
        cargo: components.ShipCargoJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JettisonData> = z
        .object({
            cargo: components.ShipCargoJson$.outboundSchema,
        })
        .transform((v) => {
            return {
                cargo: v.cargo,
            };
        });
}

/** @internal */
export namespace JettisonResponseBody$ {
    export type Inbound = {
        data: JettisonData$.Inbound;
    };

    export const inboundSchema: z.ZodType<JettisonResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => JettisonData$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: JettisonData$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JettisonResponseBody> = z
        .object({
            data: z.lazy(() => JettisonData$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace JettisonResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: JettisonResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<JettisonResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => JettisonResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: JettisonResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JettisonResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => JettisonResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
