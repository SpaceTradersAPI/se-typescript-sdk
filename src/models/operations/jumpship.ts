/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type JumpShipSecurity = {
    agentToken: string;
};

export type JumpShipRequestBody = {
    /**
     * The symbol of the waypoint to jump to. The destination must be a connected waypoint.
     */
    waypointSymbol: string;
};

export type JumpShipRequest = {
    /**
     * The ship symbol.
     */
    shipSymbol: string;
    requestBody?: JumpShipRequestBody | undefined;
};

export type JumpShipData = {
    /**
     * The navigation information of the ship.
     */
    nav: components.ShipNavJson;
    /**
     * A cooldown is a period of time in which a ship cannot perform certain actions.
     */
    cooldown: components.CooldownJson;
    /**
     * Result of a transaction with a market.
     */
    transaction: components.MarketTransactionJson;
    /**
     * Agent details.
     */
    agent: components.AgentJson;
};

/**
 * Jump successful.
 */
export type JumpShipResponseBody = {
    data: JumpShipData;
};

export type JumpShipResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Jump successful.
     */
    object?: JumpShipResponseBody | undefined;
};

/** @internal */
export namespace JumpShipSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<JumpShipSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JumpShipSecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export namespace JumpShipRequestBody$ {
    export type Inbound = {
        waypointSymbol: string;
    };

    export const inboundSchema: z.ZodType<JumpShipRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            waypointSymbol: z.string(),
        })
        .transform((v) => {
            return {
                waypointSymbol: v.waypointSymbol,
            };
        });

    export type Outbound = {
        waypointSymbol: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JumpShipRequestBody> = z
        .object({
            waypointSymbol: z.string(),
        })
        .transform((v) => {
            return {
                waypointSymbol: v.waypointSymbol,
            };
        });
}

/** @internal */
export namespace JumpShipRequest$ {
    export type Inbound = {
        shipSymbol: string;
        RequestBody?: JumpShipRequestBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<JumpShipRequest, z.ZodTypeDef, Inbound> = z
        .object({
            shipSymbol: z.string(),
            RequestBody: z.lazy(() => JumpShipRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        shipSymbol: string;
        RequestBody?: JumpShipRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JumpShipRequest> = z
        .object({
            shipSymbol: z.string(),
            requestBody: z.lazy(() => JumpShipRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace JumpShipData$ {
    export type Inbound = {
        nav: components.ShipNavJson$.Inbound;
        cooldown: components.CooldownJson$.Inbound;
        transaction: components.MarketTransactionJson$.Inbound;
        agent: components.AgentJson$.Inbound;
    };

    export const inboundSchema: z.ZodType<JumpShipData, z.ZodTypeDef, Inbound> = z
        .object({
            nav: components.ShipNavJson$.inboundSchema,
            cooldown: components.CooldownJson$.inboundSchema,
            transaction: components.MarketTransactionJson$.inboundSchema,
            agent: components.AgentJson$.inboundSchema,
        })
        .transform((v) => {
            return {
                nav: v.nav,
                cooldown: v.cooldown,
                transaction: v.transaction,
                agent: v.agent,
            };
        });

    export type Outbound = {
        nav: components.ShipNavJson$.Outbound;
        cooldown: components.CooldownJson$.Outbound;
        transaction: components.MarketTransactionJson$.Outbound;
        agent: components.AgentJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JumpShipData> = z
        .object({
            nav: components.ShipNavJson$.outboundSchema,
            cooldown: components.CooldownJson$.outboundSchema,
            transaction: components.MarketTransactionJson$.outboundSchema,
            agent: components.AgentJson$.outboundSchema,
        })
        .transform((v) => {
            return {
                nav: v.nav,
                cooldown: v.cooldown,
                transaction: v.transaction,
                agent: v.agent,
            };
        });
}

/** @internal */
export namespace JumpShipResponseBody$ {
    export type Inbound = {
        data: JumpShipData$.Inbound;
    };

    export const inboundSchema: z.ZodType<JumpShipResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => JumpShipData$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: JumpShipData$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JumpShipResponseBody> = z
        .object({
            data: z.lazy(() => JumpShipData$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace JumpShipResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: JumpShipResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<JumpShipResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => JumpShipResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: JumpShipResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JumpShipResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => JumpShipResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
