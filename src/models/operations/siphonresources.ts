/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type SiphonResourcesSecurity = {
    agentToken: string;
};

export type SiphonResourcesRequest = {
    /**
     * The ship symbol.
     */
    shipSymbol: string;
};

export type SiphonResourcesEvents = components.ShipConditionEventJson;

export type SiphonResourcesData = {
    /**
     * A cooldown is a period of time in which a ship cannot perform certain actions.
     */
    cooldown: components.CooldownJson;
    /**
     * Siphon details.
     */
    siphon: components.SiphonJson;
    /**
     * Ship cargo details.
     */
    cargo: components.ShipCargoJson;
    events: Array<components.ShipConditionEventJson>;
};

/**
 * Siphon successful.
 */
export type SiphonResourcesResponseBody = {
    data: SiphonResourcesData;
};

export type SiphonResourcesResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Siphon successful.
     */
    object?: SiphonResourcesResponseBody | undefined;
};

/** @internal */
export namespace SiphonResourcesSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<SiphonResourcesSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SiphonResourcesSecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export namespace SiphonResourcesRequest$ {
    export type Inbound = {
        shipSymbol: string;
    };

    export const inboundSchema: z.ZodType<SiphonResourcesRequest, z.ZodTypeDef, Inbound> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });

    export type Outbound = {
        shipSymbol: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SiphonResourcesRequest> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });
}

/** @internal */
export namespace SiphonResourcesEvents$ {
    export type Inbound = components.ShipConditionEventJson$.Inbound;

    export type Outbound = components.ShipConditionEventJson$.Outbound;
    export const inboundSchema: z.ZodType<SiphonResourcesEvents, z.ZodTypeDef, Inbound> =
        components.ShipConditionEventJson$.inboundSchema;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SiphonResourcesEvents> =
        components.ShipConditionEventJson$.outboundSchema;
}

/** @internal */
export namespace SiphonResourcesData$ {
    export type Inbound = {
        cooldown: components.CooldownJson$.Inbound;
        siphon: components.SiphonJson$.Inbound;
        cargo: components.ShipCargoJson$.Inbound;
        events: Array<components.ShipConditionEventJson$.Inbound>;
    };

    export const inboundSchema: z.ZodType<SiphonResourcesData, z.ZodTypeDef, Inbound> = z
        .object({
            cooldown: components.CooldownJson$.inboundSchema,
            siphon: components.SiphonJson$.inboundSchema,
            cargo: components.ShipCargoJson$.inboundSchema,
            events: z.array(components.ShipConditionEventJson$.inboundSchema),
        })
        .transform((v) => {
            return {
                cooldown: v.cooldown,
                siphon: v.siphon,
                cargo: v.cargo,
                events: v.events,
            };
        });

    export type Outbound = {
        cooldown: components.CooldownJson$.Outbound;
        siphon: components.SiphonJson$.Outbound;
        cargo: components.ShipCargoJson$.Outbound;
        events: Array<components.ShipConditionEventJson$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SiphonResourcesData> = z
        .object({
            cooldown: components.CooldownJson$.outboundSchema,
            siphon: components.SiphonJson$.outboundSchema,
            cargo: components.ShipCargoJson$.outboundSchema,
            events: z.array(components.ShipConditionEventJson$.outboundSchema),
        })
        .transform((v) => {
            return {
                cooldown: v.cooldown,
                siphon: v.siphon,
                cargo: v.cargo,
                events: v.events,
            };
        });
}

/** @internal */
export namespace SiphonResourcesResponseBody$ {
    export type Inbound = {
        data: SiphonResourcesData$.Inbound;
    };

    export const inboundSchema: z.ZodType<SiphonResourcesResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => SiphonResourcesData$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: SiphonResourcesData$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SiphonResourcesResponseBody> = z
        .object({
            data: z.lazy(() => SiphonResourcesData$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace SiphonResourcesResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: SiphonResourcesResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<SiphonResourcesResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => SiphonResourcesResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: SiphonResourcesResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SiphonResourcesResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => SiphonResourcesResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
