/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type CreateChartSecurity = {
    agentToken: string;
};

export type CreateChartRequest = {
    /**
     * The symbol of the ship.
     */
    shipSymbol: string;
};

export type CreateChartData = {
    /**
     * The chart of a system or waypoint, which makes the location visible to other agents.
     */
    chart: components.ChartJson;
    /**
     * A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
     */
    waypoint: components.WaypointJson;
};

/**
 * Created
 */
export type CreateChartResponseBody = {
    data: CreateChartData;
};

export type CreateChartResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Created
     */
    object?: CreateChartResponseBody | undefined;
};

/** @internal */
export namespace CreateChartSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<CreateChartSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateChartSecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export namespace CreateChartRequest$ {
    export type Inbound = {
        shipSymbol: string;
    };

    export const inboundSchema: z.ZodType<CreateChartRequest, z.ZodTypeDef, Inbound> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });

    export type Outbound = {
        shipSymbol: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateChartRequest> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });
}

/** @internal */
export namespace CreateChartData$ {
    export type Inbound = {
        chart: components.ChartJson$.Inbound;
        waypoint: components.WaypointJson$.Inbound;
    };

    export const inboundSchema: z.ZodType<CreateChartData, z.ZodTypeDef, Inbound> = z
        .object({
            chart: components.ChartJson$.inboundSchema,
            waypoint: components.WaypointJson$.inboundSchema,
        })
        .transform((v) => {
            return {
                chart: v.chart,
                waypoint: v.waypoint,
            };
        });

    export type Outbound = {
        chart: components.ChartJson$.Outbound;
        waypoint: components.WaypointJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateChartData> = z
        .object({
            chart: components.ChartJson$.outboundSchema,
            waypoint: components.WaypointJson$.outboundSchema,
        })
        .transform((v) => {
            return {
                chart: v.chart,
                waypoint: v.waypoint,
            };
        });
}

/** @internal */
export namespace CreateChartResponseBody$ {
    export type Inbound = {
        data: CreateChartData$.Inbound;
    };

    export const inboundSchema: z.ZodType<CreateChartResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => CreateChartData$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: CreateChartData$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateChartResponseBody> = z
        .object({
            data: z.lazy(() => CreateChartData$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace CreateChartResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: CreateChartResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CreateChartResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => CreateChartResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: CreateChartResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateChartResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => CreateChartResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
