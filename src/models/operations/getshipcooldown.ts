/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type GetShipCooldownSecurity = {
    agentToken: string;
};

export type GetShipCooldownRequest = {
    /**
     * The symbol of the ship.
     */
    shipSymbol: string;
};

/**
 * Succesfully fetched ship's cooldown.
 */
export type GetShipCooldownResponseBody = {
    /**
     * A cooldown is a period of time in which a ship cannot perform certain actions.
     */
    data: components.CooldownJson;
};

export type GetShipCooldownResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Succesfully fetched ship's cooldown.
     */
    object?: GetShipCooldownResponseBody | undefined;
};

/** @internal */
export namespace GetShipCooldownSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<GetShipCooldownSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetShipCooldownSecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export namespace GetShipCooldownRequest$ {
    export type Inbound = {
        shipSymbol: string;
    };

    export const inboundSchema: z.ZodType<GetShipCooldownRequest, z.ZodTypeDef, Inbound> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });

    export type Outbound = {
        shipSymbol: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetShipCooldownRequest> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });
}

/** @internal */
export namespace GetShipCooldownResponseBody$ {
    export type Inbound = {
        data: components.CooldownJson$.Inbound;
    };

    export const inboundSchema: z.ZodType<GetShipCooldownResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: components.CooldownJson$.inboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: components.CooldownJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetShipCooldownResponseBody> = z
        .object({
            data: components.CooldownJson$.outboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace GetShipCooldownResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: GetShipCooldownResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetShipCooldownResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => GetShipCooldownResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: GetShipCooldownResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetShipCooldownResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => GetShipCooldownResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
