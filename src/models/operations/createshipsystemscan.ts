/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type CreateShipSystemScanSecurity = {
    agentToken: string;
};

export type CreateShipSystemScanRequest = {
    /**
     * The ship symbol.
     */
    shipSymbol: string;
};

export type CreateShipSystemScanData = {
    /**
     * A cooldown is a period of time in which a ship cannot perform certain actions.
     */
    cooldown: components.CooldownJson;
    /**
     * List of scanned systems.
     */
    systems: Array<components.ScannedSystemJson>;
};

/**
 * Successfully scanned for nearby systems.
 */
export type CreateShipSystemScanResponseBody = {
    data: CreateShipSystemScanData;
};

export type CreateShipSystemScanResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successfully scanned for nearby systems.
     */
    object?: CreateShipSystemScanResponseBody | undefined;
};

/** @internal */
export namespace CreateShipSystemScanSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<CreateShipSystemScanSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateShipSystemScanSecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export namespace CreateShipSystemScanRequest$ {
    export type Inbound = {
        shipSymbol: string;
    };

    export const inboundSchema: z.ZodType<CreateShipSystemScanRequest, z.ZodTypeDef, Inbound> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });

    export type Outbound = {
        shipSymbol: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateShipSystemScanRequest> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });
}

/** @internal */
export namespace CreateShipSystemScanData$ {
    export type Inbound = {
        cooldown: components.CooldownJson$.Inbound;
        systems: Array<components.ScannedSystemJson$.Inbound>;
    };

    export const inboundSchema: z.ZodType<CreateShipSystemScanData, z.ZodTypeDef, Inbound> = z
        .object({
            cooldown: components.CooldownJson$.inboundSchema,
            systems: z.array(components.ScannedSystemJson$.inboundSchema),
        })
        .transform((v) => {
            return {
                cooldown: v.cooldown,
                systems: v.systems,
            };
        });

    export type Outbound = {
        cooldown: components.CooldownJson$.Outbound;
        systems: Array<components.ScannedSystemJson$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateShipSystemScanData> = z
        .object({
            cooldown: components.CooldownJson$.outboundSchema,
            systems: z.array(components.ScannedSystemJson$.outboundSchema),
        })
        .transform((v) => {
            return {
                cooldown: v.cooldown,
                systems: v.systems,
            };
        });
}

/** @internal */
export namespace CreateShipSystemScanResponseBody$ {
    export type Inbound = {
        data: CreateShipSystemScanData$.Inbound;
    };

    export const inboundSchema: z.ZodType<CreateShipSystemScanResponseBody, z.ZodTypeDef, Inbound> =
        z
            .object({
                data: z.lazy(() => CreateShipSystemScanData$.inboundSchema),
            })
            .transform((v) => {
                return {
                    data: v.data,
                };
            });

    export type Outbound = {
        data: CreateShipSystemScanData$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateShipSystemScanResponseBody
    > = z
        .object({
            data: z.lazy(() => CreateShipSystemScanData$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace CreateShipSystemScanResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: CreateShipSystemScanResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CreateShipSystemScanResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => CreateShipSystemScanResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: CreateShipSystemScanResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateShipSystemScanResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => CreateShipSystemScanResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
