/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type PurchaseShipSecurity = {
    agentToken: string;
};

export type PurchaseShipRequestBody = {
    /**
     * Type of ship
     */
    shipType: components.ShipTypeJson;
    /**
     * The symbol of the waypoint you want to purchase the ship at.
     */
    waypointSymbol: string;
};

export type PurchaseShipData = {
    /**
     * Agent details.
     */
    agent: components.AgentJson;
    /**
     * Ship details.
     */
    ship: components.ShipJson;
    /**
     * Results of a transaction with a shipyard.
     */
    transaction: components.ShipyardTransactionJson;
};

/**
 * Purchased ship successfully.
 */
export type PurchaseShipResponseBody = {
    data: PurchaseShipData;
};

export type PurchaseShipResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Purchased ship successfully.
     */
    object?: PurchaseShipResponseBody | undefined;
};

/** @internal */
export namespace PurchaseShipSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<PurchaseShipSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PurchaseShipSecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export namespace PurchaseShipRequestBody$ {
    export type Inbound = {
        shipType: components.ShipTypeJson;
        waypointSymbol: string;
    };

    export const inboundSchema: z.ZodType<PurchaseShipRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            shipType: components.ShipTypeJson$,
            waypointSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipType: v.shipType,
                waypointSymbol: v.waypointSymbol,
            };
        });

    export type Outbound = {
        shipType: components.ShipTypeJson;
        waypointSymbol: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PurchaseShipRequestBody> = z
        .object({
            shipType: components.ShipTypeJson$,
            waypointSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipType: v.shipType,
                waypointSymbol: v.waypointSymbol,
            };
        });
}

/** @internal */
export namespace PurchaseShipData$ {
    export type Inbound = {
        agent: components.AgentJson$.Inbound;
        ship: components.ShipJson$.Inbound;
        transaction: components.ShipyardTransactionJson$.Inbound;
    };

    export const inboundSchema: z.ZodType<PurchaseShipData, z.ZodTypeDef, Inbound> = z
        .object({
            agent: components.AgentJson$.inboundSchema,
            ship: components.ShipJson$.inboundSchema,
            transaction: components.ShipyardTransactionJson$.inboundSchema,
        })
        .transform((v) => {
            return {
                agent: v.agent,
                ship: v.ship,
                transaction: v.transaction,
            };
        });

    export type Outbound = {
        agent: components.AgentJson$.Outbound;
        ship: components.ShipJson$.Outbound;
        transaction: components.ShipyardTransactionJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PurchaseShipData> = z
        .object({
            agent: components.AgentJson$.outboundSchema,
            ship: components.ShipJson$.outboundSchema,
            transaction: components.ShipyardTransactionJson$.outboundSchema,
        })
        .transform((v) => {
            return {
                agent: v.agent,
                ship: v.ship,
                transaction: v.transaction,
            };
        });
}

/** @internal */
export namespace PurchaseShipResponseBody$ {
    export type Inbound = {
        data: PurchaseShipData$.Inbound;
    };

    export const inboundSchema: z.ZodType<PurchaseShipResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => PurchaseShipData$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: PurchaseShipData$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PurchaseShipResponseBody> = z
        .object({
            data: z.lazy(() => PurchaseShipData$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace PurchaseShipResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: PurchaseShipResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PurchaseShipResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => PurchaseShipResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: PurchaseShipResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PurchaseShipResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => PurchaseShipResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
