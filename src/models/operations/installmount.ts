/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type InstallMountSecurity = {
    agentToken: string;
};

export type InstallMountInstallMountRequest = {
    symbol: string;
};

export type InstallMountRequest = {
    /**
     * The ship's symbol.
     */
    shipSymbol: string;
    requestBody?: InstallMountInstallMountRequest | undefined;
};

export type InstallMountData = {
    /**
     * Agent details.
     */
    agent: components.AgentJson;
    /**
     * List of installed mounts after the installation of the new mount.
     */
    mounts: Array<components.ShipMountJson>;
    /**
     * Ship cargo details.
     */
    cargo: components.ShipCargoJson;
    /**
     * Result of a transaction for a ship modification, such as installing a mount or a module.
     */
    transaction: components.ShipModificationTransactionJson;
};

/**
 * Successfully installed the mount.
 */
export type InstallMountInstallMount201Response = {
    data: InstallMountData;
};

export type InstallMountResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successfully installed the mount.
     */
    installMount201Response?: InstallMountInstallMount201Response | undefined;
};

/** @internal */
export namespace InstallMountSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<InstallMountSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InstallMountSecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export namespace InstallMountInstallMountRequest$ {
    export type Inbound = {
        symbol: string;
    };

    export const inboundSchema: z.ZodType<InstallMountInstallMountRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                symbol: z.string(),
            })
            .transform((v) => {
                return {
                    symbol: v.symbol,
                };
            });

    export type Outbound = {
        symbol: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        InstallMountInstallMountRequest
    > = z
        .object({
            symbol: z.string(),
        })
        .transform((v) => {
            return {
                symbol: v.symbol,
            };
        });
}

/** @internal */
export namespace InstallMountRequest$ {
    export type Inbound = {
        shipSymbol: string;
        RequestBody?: InstallMountInstallMountRequest$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<InstallMountRequest, z.ZodTypeDef, Inbound> = z
        .object({
            shipSymbol: z.string(),
            RequestBody: z.lazy(() => InstallMountInstallMountRequest$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        shipSymbol: string;
        RequestBody?: InstallMountInstallMountRequest$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InstallMountRequest> = z
        .object({
            shipSymbol: z.string(),
            requestBody: z.lazy(() => InstallMountInstallMountRequest$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace InstallMountData$ {
    export type Inbound = {
        agent: components.AgentJson$.Inbound;
        mounts: Array<components.ShipMountJson$.Inbound>;
        cargo: components.ShipCargoJson$.Inbound;
        transaction: components.ShipModificationTransactionJson$.Inbound;
    };

    export const inboundSchema: z.ZodType<InstallMountData, z.ZodTypeDef, Inbound> = z
        .object({
            agent: components.AgentJson$.inboundSchema,
            mounts: z.array(components.ShipMountJson$.inboundSchema),
            cargo: components.ShipCargoJson$.inboundSchema,
            transaction: components.ShipModificationTransactionJson$.inboundSchema,
        })
        .transform((v) => {
            return {
                agent: v.agent,
                mounts: v.mounts,
                cargo: v.cargo,
                transaction: v.transaction,
            };
        });

    export type Outbound = {
        agent: components.AgentJson$.Outbound;
        mounts: Array<components.ShipMountJson$.Outbound>;
        cargo: components.ShipCargoJson$.Outbound;
        transaction: components.ShipModificationTransactionJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InstallMountData> = z
        .object({
            agent: components.AgentJson$.outboundSchema,
            mounts: z.array(components.ShipMountJson$.outboundSchema),
            cargo: components.ShipCargoJson$.outboundSchema,
            transaction: components.ShipModificationTransactionJson$.outboundSchema,
        })
        .transform((v) => {
            return {
                agent: v.agent,
                mounts: v.mounts,
                cargo: v.cargo,
                transaction: v.transaction,
            };
        });
}

/** @internal */
export namespace InstallMountInstallMount201Response$ {
    export type Inbound = {
        data: InstallMountData$.Inbound;
    };

    export const inboundSchema: z.ZodType<
        InstallMountInstallMount201Response,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            data: z.lazy(() => InstallMountData$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: InstallMountData$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        InstallMountInstallMount201Response
    > = z
        .object({
            data: z.lazy(() => InstallMountData$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace InstallMountResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        "Install Mount 201 Response"?: InstallMountInstallMount201Response$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<InstallMountResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            "Install Mount 201 Response": z
                .lazy(() => InstallMountInstallMount201Response$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v["Install Mount 201 Response"] === undefined
                    ? null
                    : { installMount201Response: v["Install Mount 201 Response"] }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        "Install Mount 201 Response"?: InstallMountInstallMount201Response$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InstallMountResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            installMount201Response: z
                .lazy(() => InstallMountInstallMount201Response$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.installMount201Response === undefined
                    ? null
                    : { "Install Mount 201 Response": v.installMount201Response }),
            };
        });
}
