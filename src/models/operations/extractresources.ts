/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type ExtractResourcesSecurity = {
    agentToken: string;
};

export type ExtractResourcesRequestBody = {
    /**
     * A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there.
     */
    survey?: components.SurveyJson | undefined;
};

export type ExtractResourcesRequest = {
    /**
     * The ship symbol.
     */
    shipSymbol: string;
    requestBody?: ExtractResourcesRequestBody | undefined;
};

export type Events = components.ShipConditionEventJson;

export type ExtractResourcesData = {
    /**
     * A cooldown is a period of time in which a ship cannot perform certain actions.
     */
    cooldown: components.CooldownJson;
    /**
     * Extraction details.
     */
    extraction: components.ExtractionJson;
    /**
     * Ship cargo details.
     */
    cargo: components.ShipCargoJson;
    events: Array<components.ShipConditionEventJson>;
};

/**
 * Extracted successfully.
 */
export type ExtractResourcesResponseBody = {
    data: ExtractResourcesData;
};

export type ExtractResourcesResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Extracted successfully.
     */
    object?: ExtractResourcesResponseBody | undefined;
};

/** @internal */
export namespace ExtractResourcesSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<ExtractResourcesSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExtractResourcesSecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export namespace ExtractResourcesRequestBody$ {
    export type Inbound = {
        survey?: components.SurveyJson$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ExtractResourcesRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            survey: components.SurveyJson$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.survey === undefined ? null : { survey: v.survey }),
            };
        });

    export type Outbound = {
        survey?: components.SurveyJson$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExtractResourcesRequestBody> = z
        .object({
            survey: components.SurveyJson$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.survey === undefined ? null : { survey: v.survey }),
            };
        });
}

/** @internal */
export namespace ExtractResourcesRequest$ {
    export type Inbound = {
        shipSymbol: string;
        RequestBody?: ExtractResourcesRequestBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ExtractResourcesRequest, z.ZodTypeDef, Inbound> = z
        .object({
            shipSymbol: z.string(),
            RequestBody: z.lazy(() => ExtractResourcesRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        shipSymbol: string;
        RequestBody?: ExtractResourcesRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExtractResourcesRequest> = z
        .object({
            shipSymbol: z.string(),
            requestBody: z.lazy(() => ExtractResourcesRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace Events$ {
    export type Inbound = components.ShipConditionEventJson$.Inbound;

    export type Outbound = components.ShipConditionEventJson$.Outbound;
    export const inboundSchema: z.ZodType<Events, z.ZodTypeDef, Inbound> =
        components.ShipConditionEventJson$.inboundSchema;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Events> =
        components.ShipConditionEventJson$.outboundSchema;
}

/** @internal */
export namespace ExtractResourcesData$ {
    export type Inbound = {
        cooldown: components.CooldownJson$.Inbound;
        extraction: components.ExtractionJson$.Inbound;
        cargo: components.ShipCargoJson$.Inbound;
        events: Array<components.ShipConditionEventJson$.Inbound>;
    };

    export const inboundSchema: z.ZodType<ExtractResourcesData, z.ZodTypeDef, Inbound> = z
        .object({
            cooldown: components.CooldownJson$.inboundSchema,
            extraction: components.ExtractionJson$.inboundSchema,
            cargo: components.ShipCargoJson$.inboundSchema,
            events: z.array(components.ShipConditionEventJson$.inboundSchema),
        })
        .transform((v) => {
            return {
                cooldown: v.cooldown,
                extraction: v.extraction,
                cargo: v.cargo,
                events: v.events,
            };
        });

    export type Outbound = {
        cooldown: components.CooldownJson$.Outbound;
        extraction: components.ExtractionJson$.Outbound;
        cargo: components.ShipCargoJson$.Outbound;
        events: Array<components.ShipConditionEventJson$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExtractResourcesData> = z
        .object({
            cooldown: components.CooldownJson$.outboundSchema,
            extraction: components.ExtractionJson$.outboundSchema,
            cargo: components.ShipCargoJson$.outboundSchema,
            events: z.array(components.ShipConditionEventJson$.outboundSchema),
        })
        .transform((v) => {
            return {
                cooldown: v.cooldown,
                extraction: v.extraction,
                cargo: v.cargo,
                events: v.events,
            };
        });
}

/** @internal */
export namespace ExtractResourcesResponseBody$ {
    export type Inbound = {
        data: ExtractResourcesData$.Inbound;
    };

    export const inboundSchema: z.ZodType<ExtractResourcesResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => ExtractResourcesData$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: ExtractResourcesData$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExtractResourcesResponseBody> = z
        .object({
            data: z.lazy(() => ExtractResourcesData$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace ExtractResourcesResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: ExtractResourcesResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ExtractResourcesResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => ExtractResourcesResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: ExtractResourcesResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExtractResourcesResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => ExtractResourcesResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
