/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type GetScrapShipSecurity = {
    agentToken: string;
};

export type GetScrapShipRequest = {
    /**
     * The ship symbol.
     */
    shipSymbol: string;
};

export type GetScrapShipData = {
    /**
     * Result of a scrap transaction.
     */
    transaction: components.ScrapTransactionJson;
};

/**
 * Successfully retrieved the amount of value that will be returned when scrapping a ship.
 */
export type GetScrapShipResponseBody = {
    data: GetScrapShipData;
};

export type GetScrapShipResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successfully retrieved the amount of value that will be returned when scrapping a ship.
     */
    object?: GetScrapShipResponseBody | undefined;
};

/** @internal */
export namespace GetScrapShipSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<GetScrapShipSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetScrapShipSecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export namespace GetScrapShipRequest$ {
    export type Inbound = {
        shipSymbol: string;
    };

    export const inboundSchema: z.ZodType<GetScrapShipRequest, z.ZodTypeDef, Inbound> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });

    export type Outbound = {
        shipSymbol: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetScrapShipRequest> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });
}

/** @internal */
export namespace GetScrapShipData$ {
    export type Inbound = {
        transaction: components.ScrapTransactionJson$.Inbound;
    };

    export const inboundSchema: z.ZodType<GetScrapShipData, z.ZodTypeDef, Inbound> = z
        .object({
            transaction: components.ScrapTransactionJson$.inboundSchema,
        })
        .transform((v) => {
            return {
                transaction: v.transaction,
            };
        });

    export type Outbound = {
        transaction: components.ScrapTransactionJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetScrapShipData> = z
        .object({
            transaction: components.ScrapTransactionJson$.outboundSchema,
        })
        .transform((v) => {
            return {
                transaction: v.transaction,
            };
        });
}

/** @internal */
export namespace GetScrapShipResponseBody$ {
    export type Inbound = {
        data: GetScrapShipData$.Inbound;
    };

    export const inboundSchema: z.ZodType<GetScrapShipResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => GetScrapShipData$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: GetScrapShipData$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetScrapShipResponseBody> = z
        .object({
            data: z.lazy(() => GetScrapShipData$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace GetScrapShipResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: GetScrapShipResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetScrapShipResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => GetScrapShipResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: GetScrapShipResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetScrapShipResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => GetScrapShipResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
