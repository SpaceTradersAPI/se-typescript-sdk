/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type RepairShipSecurity = {
    agentToken: string;
};

export type RepairShipRequest = {
    /**
     * The ship symbol.
     */
    shipSymbol: string;
};

export type RepairShipData = {
    /**
     * Agent details.
     */
    agent: components.AgentJson;
    /**
     * Ship details.
     */
    ship: components.ShipJson;
    /**
     * Result of a repair transaction.
     */
    transaction: components.RepairTransactionJson;
};

/**
 * Ship repaired successfully.
 */
export type RepairShipResponseBody = {
    data: RepairShipData;
};

export type RepairShipResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Ship repaired successfully.
     */
    object?: RepairShipResponseBody | undefined;
};

/** @internal */
export namespace RepairShipSecurity$ {
    export type Inbound = {
        AgentToken: string;
    };

    export const inboundSchema: z.ZodType<RepairShipSecurity, z.ZodTypeDef, Inbound> = z
        .object({
            AgentToken: z.string(),
        })
        .transform((v) => {
            return {
                agentToken: v.AgentToken,
            };
        });

    export type Outbound = {
        AgentToken: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RepairShipSecurity> = z
        .object({
            agentToken: z.string(),
        })
        .transform((v) => {
            return {
                AgentToken: v.agentToken,
            };
        });
}

/** @internal */
export namespace RepairShipRequest$ {
    export type Inbound = {
        shipSymbol: string;
    };

    export const inboundSchema: z.ZodType<RepairShipRequest, z.ZodTypeDef, Inbound> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });

    export type Outbound = {
        shipSymbol: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RepairShipRequest> = z
        .object({
            shipSymbol: z.string(),
        })
        .transform((v) => {
            return {
                shipSymbol: v.shipSymbol,
            };
        });
}

/** @internal */
export namespace RepairShipData$ {
    export type Inbound = {
        agent: components.AgentJson$.Inbound;
        ship: components.ShipJson$.Inbound;
        transaction: components.RepairTransactionJson$.Inbound;
    };

    export const inboundSchema: z.ZodType<RepairShipData, z.ZodTypeDef, Inbound> = z
        .object({
            agent: components.AgentJson$.inboundSchema,
            ship: components.ShipJson$.inboundSchema,
            transaction: components.RepairTransactionJson$.inboundSchema,
        })
        .transform((v) => {
            return {
                agent: v.agent,
                ship: v.ship,
                transaction: v.transaction,
            };
        });

    export type Outbound = {
        agent: components.AgentJson$.Outbound;
        ship: components.ShipJson$.Outbound;
        transaction: components.RepairTransactionJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RepairShipData> = z
        .object({
            agent: components.AgentJson$.outboundSchema,
            ship: components.ShipJson$.outboundSchema,
            transaction: components.RepairTransactionJson$.outboundSchema,
        })
        .transform((v) => {
            return {
                agent: v.agent,
                ship: v.ship,
                transaction: v.transaction,
            };
        });
}

/** @internal */
export namespace RepairShipResponseBody$ {
    export type Inbound = {
        data: RepairShipData$.Inbound;
    };

    export const inboundSchema: z.ZodType<RepairShipResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => RepairShipData$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: RepairShipData$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RepairShipResponseBody> = z
        .object({
            data: z.lazy(() => RepairShipData$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace RepairShipResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: RepairShipResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<RepairShipResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => RepairShipResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: RepairShipResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RepairShipResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => RepairShipResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
